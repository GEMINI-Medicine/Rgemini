[{"path":"https://gemini-medicine.github.io/Rgemini/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"How to contribute to Rgemini","title":"How to contribute to Rgemini","text":"welcome contributions Rgemini GEMINI team members. submit contribution: Create new issue providing sufficient details bug report/feature request. Assign issue, discuss issue team identify (co-)developers. Create new branch develop. branch name contain issue number. Commit changes newly created branch include issue number commit message. finish code development, add new item top NEWS.md concisely describing ’s changed. appropriate, add unit tests tests/testthat/ directory. Submit pull request develop branch. Ask team member review changes (see guidelines reviewers ) implement additional changes based reviewer’s feedback. reviewer approved pull request, merge branch develop, close issue, delete branch developed .","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/CONTRIBUTING.html","id":"reviewing-code","dir":"","previous_headings":"","what":"Reviewing code","title":"How to contribute to Rgemini","text":"pull requests carefully reviewed least one person. reviewing code: Pull updated code branch associated issue. can also install package specific branch using remotes::install_github(\"GEMINI-Medicine/Rgemini@<branch_name>\") Make sure can run code without error messages. Check produces expected outcome resolves issue. possible, review line code changed/added provide feedback anything think improved. details look code reviews, please refer Code Review Checklist. can also find general instructions review pull requests . Finally, check merge conflicts resolve together developer approving pull request.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/CONTRIBUTING.html","id":"merging-into-master","dir":"","previous_headings":"","what":"Merging into master","title":"How to contribute to Rgemini","text":"typically accumulate multiple changes develop branch merging changes master updating package version number. least one person review pull request master run following final checks approval: Check whether changes master yet develop. yes, merge master develop. Make sure changes develop summarized NEWS.md. Decide new version number based guidelines . Update version number NEWS.md DESCRIPTION files. Run devtools::document() R make sure documentation date. Run rcmdcheck::rcmdcheck() devtools::check() make sure errors returned. everything looks good, approve pull request merge develop master. Add new tag repository corresponding updated version number. Notify team updated version. Ideally, members immediately update newest version Rgemini. Update HPC4Health users: Please submit request HPC4Health File Transfer Log. systems team transfer updated package Nexus, allowing HPC4Health users install newest version Rgemini.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Rgemini authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cell Suppression and Table 1","text":"Cell suppression technique withhold “suppress” confidential identifying data tabular formats. common practice clinical epidemiological research present table baseline patient characteristics study population. commonly referred Table 1. order preserve patient privacy reduce risk re-identification, GEMINI employs cell suppression strategy Table 1 published shared externally. general rule hide subgroup fewer 6 patients (<= 5). special cases discussed detail . Note exists variety methods produce Table 1. examples: table1 Benjamin Rich tableone Kazuki Yoshida packages provide functionality, neither implement cell suppression. Due design table1, chosen candidate added functionality, implemented various functions described .","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"dummy-data","dir":"Articles","previous_headings":"Setup","what":"Dummy data","title":"Cell Suppression and Table 1","text":"vignette, create dummy dataset summarize:","code":"set.seed(3)  gender <- c(sample(c(\"M\", \"F\"), size = 95, replace = TRUE), rep(NA, times = 5))  exposure <- sample(   c(\"pre-pandemic\", \"pandemic\", \"post-pandemic\"),    size = 100, replace = TRUE   )  age <- rnorm(100, mean = 70, sd = 5)  condition <- sample(   c(\"DVT\", \"CVD\", \"DM\", \"Pneumonia\", \"Dementia\"),    size = 100, replace = TRUE, prob = c(0.01, 0.20, 0.4, 0.35, 0.05)   )  data <- data.frame(gender = gender, exposure = exposure, age = age, condition = condition)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"using-table1","dir":"Articles","previous_headings":"Setup","what":"Using table1","title":"Cell Suppression and Table 1","text":"Although vignette linked provides -depth exploration table1 functionality, review function simple example . summarize available patient characteristics, stratifying exposure variable:   Note patients particular conditions can easily identified, sometimes precision exact patient (patient DVT pre-pandemic). goal vignette show protect patients’ privacy.","code":"library(table1)  table1(~ gender + age + condition | exposure, data = data)"},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"default","dir":"Articles","previous_headings":"Cell suppression","what":"Default","title":"Cell Suppression and Table 1","text":"order perform cell suppression table1(), Rgemini exports render_cell_suppression.default().   Important conceptual notes: True zeros suppressed. True zeros risk identifying patient, therefore hide valuable information bring risk re-identification. Cells originally 6 patients also suppressed. Consider group patients post-pandemic subgroup. Note patients CVD post-pandemic suppressed even though originally seven patients subgroup. ? suppressed patients DVT (one patient), knowing total number patients post-pandemic (37), reverse-calculated number patients DVT (reasonable precision). Therefore algorithm designed continue suppressing successively larger groups total number suppressed patients six , reverse-calculated reasonable precision. default option shows desired behaviour conservative respect patient privacy.","code":"library(Rgemini)  table1(   ~ gender + age + condition | exposure,    data = data,    render = render_cell_suppression.default   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"customizing-output-for-continuous-variables---change-to-medians","dir":"Articles","previous_headings":"Cell suppression","what":"Customizing output for continuous variables - change to medians","title":"Cell Suppression and Table 1","text":"can specify whether use median mean continuous variables specifying continuous_fn.   Note however can render medians without enabling cell suppression, desired.   can also specify render function particular variable type:  ","code":"table1(   ~ gender + age + condition | exposure,    data = data,    render = render_cell_suppression.default,    continuous_fn = 'median'   ) table1(   ~ gender + age + condition | exposure,    data = data,    render.continuous = render_median.continuous   ) table1(   ~ gender + age + condition | exposure,    data = data,    render.continuous = render_cell_suppression.continuous,    continuous_fn = 'median'   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"customizing-output---rounding","dir":"Articles","previous_headings":"Cell suppression","what":"Customizing output - Rounding","title":"Cell Suppression and Table 1","text":"can also specify number digits round means, medians, percentages using digits argument.  ","code":"table1(   ~ gender + age + condition | exposure,    data = data,    render = render_cell_suppression.default,    digits = 2   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"finer-control","dir":"Articles","previous_headings":"Cell suppression","what":"Finer control","title":"Cell Suppression and Table 1","text":"render_cell_suppression.default wrapper around individual render functions covariate datatype. finer control, use primary cell suppression functionality implemented following render functions: render_cell_suppression.categorical() render_cell_suppression.continuous() render_cell_suppression.discrete() render_cell_suppression.missing() render_cell_suppression.strat() can apply cell suppression directly covariates particular data types supplying custom renderer functions.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"suppress-categorical-variables-only","dir":"Articles","previous_headings":"Cell suppression > Finer control","what":"Suppress categorical variables only","title":"Cell Suppression and Table 1","text":"  may also want display single level binary variables (gender). can optional single_level_binary variable.","code":"table1(   ~ gender + age + condition | exposure,    data = data,    render.categorical = render_cell_suppression.categorical   ) table1(   ~ gender + age + condition | exposure,    data = data,    render.categorical = render_cell_suppression.categorical,   single_level_binary = TRUE   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"suppress-cells-with-counts-fewer-than-six-only","dir":"Articles","previous_headings":"Cell suppression > Finer control","what":"Suppress cells with counts fewer than six only","title":"Cell Suppression and Table 1","text":"Although default option shows desired behaviour, Rgemini can export function simply suppress cells counts fewer six needed.  ","code":"table1(   ~ gender + age + condition | exposure,    data = data,    render.categorical = render_strict_cell_suppression.categorical   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"suppress-missing-values","dir":"Articles","previous_headings":"Cell suppression > Finer control","what":"Suppress missing values","title":"Cell Suppression and Table 1","text":"Note suppress missing values, use render_cell_suppression.missing() function:   Note issue . Although able suppress cells counts less six gender missing, obvious count (.e. can easily reverse calculated). One approach deal actually code missing gender values new category variable, apply conservative render_cell_suppression.categorical().   Although might make much practical sense case, approach taken categorical variable missing values like employ conservative cell suppression strategy patient privacy.","code":"table1(   ~ gender + age + condition | exposure,    data = data,    render.categorical = render_strict_cell_suppression.categorical,   render.missing = render_cell_suppression.missing   ) levels(data$gender) <- c(\"M\", \"F\", \"Not Available\") data$gender[is.na(data$gender)] <- \"Not Available\"  table1(   ~ gender + age + condition | exposure,    data = data,    render.categorical = render_cell_suppression.categorical   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"strategies-to-suppress-continuous-variables","dir":"Articles","previous_headings":"Cell suppression > Finer control","what":"Strategies to suppress continuous variables","title":"Cell Suppression and Table 1","text":"also possible suppress continuous variables desired. See example .","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"set-up","dir":"Articles","previous_headings":"Cell suppression > Finer control > Strategies to suppress continuous variables","what":"Set up","title":"Cell Suppression and Table 1","text":" ","code":"set.seed(1)  continuous_data <- data.frame(   \"age\" = rnorm(100, mean = 70, sd = 10),   \"laps\" = abs(rnorm(100, mean = 1, sd = 1)),   \"nobel\" = sample(c(\"nobel prize won\", \"nobel prize not won\"), 100, replace = TRUE, prob = c(0.01, 0.99)) )  table1(~ age + laps | nobel, data = continuous_data)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"suppress-continuous-variables","dir":"Articles","previous_headings":"Cell suppression > Finer control > Strategies to suppress continuous variables","what":"Suppress continuous variables","title":"Cell Suppression and Table 1","text":"use render_cell_suppression.continuous suppress summary statistics groups size smaller six.   Note case however, using strata totals can reverse-calculate number patients, suppress counts strata well using render_cell_suppression.strat.","code":"table1(   ~ age + laps | nobel,    data = continuous_data,    render.continuous = render_cell_suppression.continuous   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"suppress-counts-in-the-strata","dir":"Articles","previous_headings":"Cell suppression > Finer control > Strategies to suppress continuous variables","what":"Suppress counts in the strata","title":"Cell Suppression and Table 1","text":" ","code":"table1(   ~ age + laps | nobel,    data = continuous_data,    render.continuous = render_cell_suppression.continuous,   render.strat = render_cell_suppression.strat   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"suppress-overall-count","dir":"Articles","previous_headings":"Cell suppression > Finer control > Strategies to suppress continuous variables","what":"Suppress “Overall” count","title":"Cell Suppression and Table 1","text":"encounter similar issue can reverse calculate strata total using overall count. Therefore scenario consider removing “Overall” count:   Important conceptual notes: don’t employ strategy stratification variables categorical variables, successively suppress additional strata total number suppressed individuals six . categorical variable six observations category indirectly provide total strata. Therefore safest apply strict suppression strata totals, remove “Overall” column shown .","code":"table1(   ~ age + laps | nobel,    data = continuous_data,    render.continuous = render_cell_suppression.continuous,   render.strat = render_cell_suppression.strat,   overall = FALSE   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"calculating-standardized-mean-differences","dir":"Articles","previous_headings":"","what":"Calculating standardized mean differences","title":"Cell Suppression and Table 1","text":"One primary difference tableone table1 ability compute display standardized mean differences (SMDs). enable , Rgemini exports max_pairwise_smd(). Note stratification variable two levels, corresponds absolute value SMD (directionality). stratification two levels, maximum pairwise SMD. can supplied table1 extra.col argument, takes named list extra columns append table. Usage follows:  ","code":"table1(~ gender + age + condition | exposure, data = data, extra.col = list(\"Maximum Standardized Mean Difference\" = max_pairwise_smd))"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"replicating-table1-functionality","dir":"Articles","previous_headings":"","what":"Replicating table1 functionality","title":"Cell Suppression and Table 1","text":"Note since extensions passed arguments table1, entire original API table1 still exposed. Therefore replicate examples .","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"change-row-labels","dir":"Articles","previous_headings":"Replicating table1 functionality > Labelling","what":"Change row labels","title":"Cell Suppression and Table 1","text":"change row labels . order , need use default (.e. “non-formula”) interface table1:  ","code":"labels <- list(   variables=list(age=\"Age (years)\", gender=\"Sex\", condition=\"MRDx\")   )  strata <- split(data, data$exposure) table1(strata, labels = labels)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"change-strata-labels","dir":"Articles","previous_headings":"Replicating table1 functionality > Labelling","what":"Change strata labels","title":"Cell Suppression and Table 1","text":"Next change strata labels. change strata labels change names levels factor variable corresponding strata  ","code":"levels(data$exposure) <- c(\"During Pandemic\", \"After Pandemic\", \"Before Pandemic\") strata <- split(data, data$exposure)  table1(strata, labels = labels)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"add-grouping-to-strata-and-standardized-mean-differences","dir":"Articles","previous_headings":"Replicating table1 functionality > Labelling","what":"Add grouping to strata and standardized mean differences","title":"Cell Suppression and Table 1","text":"Next also add grouping strata variable, specifying group names labels list, well groupspan used span label multiple groups table1 call. also add standardized mean differences using extra.col put together.  ","code":"labels$groups <- list(\"After COVID\", \"\")  extra_col <- list() extra_col$`SMD` <- max_pairwise_smd  table1(strata, labels = labels, groupspan = c(2, 1), extra.col = extra_col)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"Cell Suppression and Table 1","text":"Now perform custom labeling, cell suppression, adding column standardized mean differences follows:  ","code":"table1(   strata,    labels = labels,   groupspan = c(2, 2),   render = render_cell_suppression.default,   extra.col = list(\"SMD\" = max_pairwise_smd)   )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"customization-and-extending-functionality","dir":"Articles","previous_headings":"","what":"Customization and extending functionality","title":"Cell Suppression and Table 1","text":"Note table1 offers much flexibility briefly described respect labeling. even possibility fine tune table’s appearance CSS. See examples vignette . also possibility define new render functions new extra columns.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"creating-render-functions","dir":"Articles","previous_headings":"Customization and extending functionality","what":"Creating render functions","title":"Cell Suppression and Table 1","text":"Note render functions must designed take input single argument corresponding vector (numeric factor), output named character vector, first element unnamed always \"\". See examples output formatted:","code":"library(dplyr)  x <- mtcars$am %>% as.factor() render_cell_suppression.categorical(as.factor(mtcars$am)) ##                         0            1  ##           \"\" \"19 (59.4%)\" \"13 (40.6%)\" render_cell_suppression.continuous(1:20) ##                                           Mean (SD)  ##                        \"\" \"10.500 (&plusmn; 5.916)\" render_cell_suppression.missing(c(1:19, NA)) ##                                               Missing  ##                         \"\" \"&lt; 6 obs. (suppressed)\""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/cell_suppression_and_table1.html","id":"creating-extra-columns","dir":"Articles","previous_headings":"Customization and extending functionality","what":"Creating extra columns","title":"Cell Suppression and Table 1","text":"Note functions defined extra columns must always take named list first argument, ellipses (...) last. named list corresponds variable data split stratifying variable, example : Now newly defined function can added extra column.","code":"x <- split(mtcars$disp, mtcars$am)  my_max_col <- function(x, ...) {   lapply(x, max) %>% unlist() %>% max() }  my_max_col(x) ## [1] 472 table1(~ disp | am, data = mtcars, extra.col = list(\"My Max\" = my_max_col))"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Daily Census","text":"daily_census function calculates number patients hospitalized given hospital day time period interest. census provides cross-sectional count patients occupied hospital bed 8am (default) day. Specifically, calculated number patients admitted time point discharged time point. function also returns capacity_ratio indicating whether number patients given day higher (>1) lower (<1) typical day, default, typical occupancy based median census time period interest. Note: Although function can applied different cohorts research contexts, interpretation function outputs may vary according inputs users provide. example, users pre-filter cohort based certain diagnosis criteria, census counts include patients, similarly, capacity_ratio reflect real indicator capacity, rather measure whether occupancy /typical occupancy certain group patients (also see section group_var input ).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"running-daily_census-with-default-arguments","dir":"Articles","previous_headings":"","what":"Running daily_census() with default arguments","title":"Daily Census","text":"run daily_census function, users need provide input table cohort containing encounters part cohort interest. Typically, cohort created based admdad table (subset thereof) GEMINI database. needs contain columns genc_id, hospital_num, admission_date_time, discharge_date_time. example load relevant data run daily_census function default settings: Mock output table (illustration purposes, real data): table shows example output data 5 hospitals April 2016 - April 2017. row corresponds unique combination date_time (reference time 8am, default) hospital ID (hospital_num). census variable indicates count patients occupying bed 8am day given hospital. capacity_ratio refers relative measure bed occupancy, default calculated census/median(census). Based table, users extract information, median daily census hospital study period: Additionally, users plot census capacity_ratio time, separately hospital:   Note capacity_ratio fluctuates around 1 (= typical occupancy) values > 1 correspond days higher occupancy usual.","code":"# Load necessary libraries library(RPostgreSQL) library(DBI) library(getPass)  # Establish database connection db <- DBI::dbConnect(drv,                      dbname = \"DB_name\",                      host = \"172.XX.XX.XXX\",                      port = 1234,                      user = getPass(\"Enter user:\"),                      password = getPass(\"Enter Password:\"))  # query admdad table containing cohort (could be filtered further if necessary) admdad <- dbGetQuery(db, \"SELECT genc_id, hospital_num, admission_date_time, discharge_date_time FROM admdad;\")   # Run default daily_census calculation          census_output <- daily_census(cohort = admdad)   head(census_output, 10) library(data.table) #  we are using data.table operations below, but users could also use tidyverse to analyze the function output  # Compute median census at each site median_census <- census_output[ , .(median_census = median(census)), by = hospital_num] library(ggplot2)  # Plot census over time ggplot(census_output, aes(x=as.Date(date_time), y=census, group = hospital_num, color=hospital_num)) +   geom_line(linewidth=1.5,show.legend = TRUE) +   scale_x_date(name = 'Date', breaks = seq(min(as.Date(census_output$date_time)), max(as.Date(census_output$date_time)), by=\"1 months\"), date_labels = \"%b\\n%Y\") +   ggtitle(\"Mock figure: Daily census by hospital\") + theme_classic() # Plot capacity ratio over time ggplot(census_output, aes(x=as.Date(date_time), y=capacity_ratio, group = hospital_num, color=hospital_num)) +   geom_line(linewidth=1.5,show.legend = TRUE) +   scale_x_date(name = 'Date', breaks = seq(min(as.Date(census_output$date_time)), max(as.Date(census_output$date_time)), by=\"1 months\"), date_labels = \"%b\\n%Y\") +   ggtitle(\"Mock figure: Daily capacity ratio by hospital\") + theme_classic() +   geom_hline(yintercept=1)"},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"time_period","dir":"Articles","previous_headings":"Optional input arguments","what":"time_period","title":"Daily Census","text":"default, function calculate census whole time period available cohort table. Note data availability may differ hospital, function determine data availability individually site. users want calculate census certain time period within overall cohort, can provide optional time_period input specifying start end date. example, calculate census June 1, 2016 - Dec 31, 2016: Note case, capacity_ratio calculated based typical occupancy observed time period (.e., June-Dec 2016).","code":"# Compute census for specific time period census_output <- daily_census(admdad, time_period = c(\"2016-06-01\",\"2016-12-31\"))"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"scu_exclude","dir":"Articles","previous_headings":"Optional input arguments","what":"scu_exclude","title":"Daily Census","text":"default, total duration encounter’s hospital stay considered census counts. However, certain projects, may interest exclude time points encounter special care unit (SCU), intensive care (ICU). relevant researchers want analyse bed occupancy particular medical ward (e.g., GIM) want count patients fact occupying bed ward given day, excluding patients SCU. case, users provide scu_exclude table contains SCU encounters excluded census calculation. Note: SCU table typically refers ipscu table GEMINI database, however, users may want filter table relevant scu_unit_numbers excluded census counts. function automatically removes entries scu_unit_number = 99, refers encounters \"SCU\". Additionally, SCU encounters valid scu_admit_date_time scu_discharge_date_time can excluded census. Availability variables low certain cohorts SCU units. Therefore, users advised carefully inspect SCU table make informed decision whether exclude SCU encounters, yes, SCU entries exclude.","code":"# exclude SCU encounters from census scu <- dbGetQuery(db, \"SELECT * FROM ipscu;\")   # Compute census excluding SCU census_output <- daily_census(admdad, scu_exclude = scu)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"grouping","dir":"Articles","previous_headings":"Optional input arguments","what":"group_var","title":"Daily Census","text":"default, census calculated separately hospital (hospital_num). Users can specify additional grouping variables obtain patient counts (capacity ratios) subgroups interest, different medical subservices physicians. simple example census grouped patients’ gender age (<65 vs. 65+): Mock output table showing census grouping age & gender categories: Note capacity_ratio mock example interpreted real “capacity” indicator, rather, measure whether given day (>1) less (<1) patients certain age/gender typical day. Capacity_ratio useful grouping variables correspond separate medical entities, different medical subservices wards, capacity_ratio can serve indicator system load vs. capacity. Nevertheless, grouping variables based patient characteristics (age, gender, diagnosis group, illness severity etc.) useful analyse case mix hospitalized patients certain periods time.","code":"# Create age category admdad$age_cat <- ifelse(admdad$age <= 65,'<=65','>65')  # Compute census by gender & age categories census_output <- daily_census(admdad, group_var = c(\"gender\",\"age_cat\"))   head(census_output,10)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"capacity_func","dir":"Articles","previous_headings":"Optional input arguments","what":"capacity_func","title":"Daily Census","text":"default, capacity_ratio defined census/median(census), calculated separately hospital grouping variable (). , capacity_ratio refers daily count patients relative typical bed occupancy, typical bed occupancy defined median census time period interest. Alternatively, users can specify measures central tendency obtain typical occupancy (“mean”, “mode”) estimate capacity based maximum occupancy (“max”).","code":"# Get occupancy relative to max capacity (estimated based on max(census)) census_output <- daily_census(admdad, capacity_func = \"max\")"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"time_of_day","dir":"Articles","previous_headings":"Optional input arguments","what":"time_of_day","title":"Daily Census","text":"default, census calculated 8am day study period. example, obtain patient counts April 1st, 2016 function counts patients admission_date_time <= '2015-04-01 08:00:00' discharge_date_time >= '2015-04-01 08:00:00'. Users can specify different reference time providing optional time_of_day input:","code":"# Calculate census at 2.30pm each day census_output <- daily_census(admdad, time_of_day = \"14:30:00\")"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"buffer","dir":"Articles","previous_headings":"Optional input arguments","what":"buffer","title":"Daily Census","text":"time periods towards end data availability timeline given hospital, users may observe pattern similar , census counts suddenly drop end specified time period:  effect due truncation bias can occur end specified time period (April 2018) close last available date overall cohort (e.g., cohort contains encounters April 2018 example). Note cohorts typically defined discharge date. , cohort includes data April 2017 - April 2018, include encounters discharged time. result, may patients admitted last week April 2018, discharged prior end month. Therefore, part cohort, counted towards census. prevent biasing census capacity_ratio estimates, function automatically checks data availability hospital based min max dates cohort input table. data availability ends prior (time ) end time period interest, buffer period 30 days applied default. Specifically, last 30 days site set NA. default setting 30 days based observation vast majority hospital stays < 30 days, therefore, can confident patients hospitalized 30 days prior end specified time period already discharged (.e., included cohort). default setting buffer = 30 result following output, removes truncation bias shown previous figure setting last 30 days time period NA:  Users can specify buffer periods (full days) based cohort (typical length stay observed cohort). example, set buffer period 10 days, run following code: Note: example, users specify time_period input ends 10 days earlier latest available data, buffer period ignored available data used calculate census time period interest. words, actual buffer period applied within function depends combination specified time period, data availability per site, buffer argument order ensure maximum amount available data used census calculation.","code":"# specify buffer of 10 days at end of time period census_output <- daily_census(admdad, buffer = 10)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/daily_census.html","id":"calculating-customized-measures-of-capacity","dir":"Articles","previous_headings":"","what":"Calculating customized measures of capacity","title":"Daily Census","text":"addition flexibility provided function , users may want obtain additional capacity indicators currently supported function. example, researchers may want calculate capacity_ratio relative typical occupancy year--year basis. function calculates capacity_ratio estimating typical (max) capacity based census numbers throughout whole time period. However, census may vary year--year basis. case, users either run daily_census() function separately study year, run function whole time period calculate year--year capacity_ratio based raw census output provided function, e.g.: Similarly, users define indicators typical occupancy currently supported function (e.g., trimmed means).","code":"# calculate capacity_ratio based on median census *per year* census_output[ , year := year(census_output$date_time)] census_output[ , capacity_ratio_yoy := census/median(census), by = c(\"hospital_num\",\"year\")]"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Episodes of care and Readmission","text":"vignette contains detailed information two functions closely related : episodes_of_care() readmission(). episodes_of_care function used readmission calculations order avoid encounters linked via transfers (.e., part episode care) counted readmissions. definitions used functions based CIHI guidelines readmission calculations (see ).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"episodes_of_care","dir":"Articles","previous_headings":"Introduction","what":"episodes_of_care()","title":"Episodes of care and Readmission","text":"function episodes_of_care() links together hospitalizations acute care transfers unique episodes care. hospitalization (genc_id), function returns corresponding: patient_id_hashed, time_to_next_admission, time_since_last_admission, AT_in_coded, AT_out_coded, AT_in_occurred, AT_out_occurred, epicare. Coded Transfers (AT_in_coded, AT_out_occurred): coded acute care transfer refers hospital coding acute care transfers based DAD Institution Institution fields. Specifically, hospitalization coded transfer-AT_in_coded==T, institution_from_type=='' acute_transfer_in=='', vice versa coded transfer . Occurred Transfers (AT_in_occurred, AT_out_occurred): acute care transfer assumed occurred (AT_in_occurred==T, AT_out_occurred==T) either following criteria met: admission medical intensive care service GEMINI hospital within 7 hours discharge another GEMINI hospital, regardless whether transfer coded hospital. admission medical intensive care service GEMINI hospital within 7-12 hours discharge another GEMINI hospital, least 1 hospital coded transfer. Episode Care (epicare): episode care refers contiguous inpatient hospitalizations admitted medical intensive care service within GEMINI network. Contiguous inpatient hospitalizations defined based occurred transfers (AT_in_occurred==T AT_out_occurred==T). Episodes involving inter-facility transfers linked regardless diagnosis. default, episodes care computed hospitalizations admdad table. See Section 3.4 function documentation options compute epicare using user specified cohort. flowchart shows epicares built:  Example output episodes_of_care(db) (mock data illustration purposes, real data):","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"readmission","dir":"Articles","previous_headings":"Introduction","what":"readmission()","title":"Episodes of care and Readmission","text":"function readmission() computes whether patient associated epicare readmitted GEMINI hospital within specified time window. hospitalization (genc_id), function returns corresponding: AT_in_occurred, AT_out_occurred, epicare, readmitX. readmitX boolean variable denoting whether readmission took place time window X-days post-discharge. important realize readmission determined looking forward data future. Therefore, readmitX measurement quality care current episode evaluates whether factors current episode LEAD readmission future. episodes care involving acute care transfers, readmissions attributed LAST hospitalization patient discharged readmission; namely last genc_id episode readmitX assigned, rest set NA. default, records admdad table used calculate readmission. See Section 3.4 function documentation options compute readmission user specified cohort. Mock example output readmission(db) (mock data illustration purposes, real data. patient_id added facilitate interpretation):","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"general-readmission-rate-calculation","dir":"Articles","previous_headings":"Introduction > readmission()","what":"General readmission rate calculation","title":"Episodes of care and Readmission","text":"Denominator Readmission Rate: Total number episodes potential readmitted. various conditions episodes removed denominator. example, episodes discharged death readmitted, therefore, removed denominator readmission rate calculation (see details Section 2 CIHI flags). episode removed Denominator setting readmitX = NA current episode. Numerator Readmission Rate: Number episodes within denominator actually readmitted within time window interest. various conditions episodes removed numerator. example, elective admissions might considered readmissions, therefore, episodes elective admissions removed numerator (see details Section 2 CIHI flags). episode removed Numerator setting readmitX = F preceding episode. example code shows calculate 7-day readmission rate properly using default settings. important note presence NAs returned readmitX variable remember exclude NAs calculating readmission rates:","code":"# Load necessary libraries: library(RPostgreSQL) library(DBI) library(getPass)  # Establish database connection db <- DBI::dbConnect(drv,                      dbname = \"db\",                      host = \"172.XX.XX.XXX\",                      port = 1234,                      user = getPass(\"Enter user:\"))  # Run default readmission calculation (with elective_admit=T and death=T)         readm <- readmission(db)   # Compute readmission rate based on readmission output denominator <- sum( !is.na( readm$readmit7 ) )  numerator <- sum( readm$readmit7, na.rm=T )  readmission_7d_derived <- numerator/denominator  # Compute readmission rate based on readmission output (Alternative) readmission_7d_derived <- mean( readm$readmit7, na.rm=T )"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"gemini-specific-considerations","dir":"Articles","previous_headings":"Introduction > readmission()","what":"GEMINI specific considerations","title":"Episodes of care and Readmission","text":"1. Readmission attribution end episode unknown last hospitalization epicare transfer coded (AT_out_coded==T) time_to_next_admission greater 12 hours infinite, suggests patient likely transferred hospital outside GEMINI network. known certain last hospitalization records last hospitalization epicare reality. avoid inaccurate attribution potential readmission, epicares excluded denominator (readmitX=NA) readmission calculation . rationales : hospitals/medical subservices GEMINI network Transfers coded hospitals typically true transfers rather errors. Hypothetical example special readmission attribution (compare colored entries genc_id 103 vs 301, genc_id 105 vs 201, see readmit7 affected):  2. Buffer period based hospital’s data availability {#sectionBuffer} patient needs discharged hospital appearing GEMINI database. patient readmitted hospital yet discharged time data transferred GEMINI, readmission record captured database. result, readmission rates underestimated time period latest data transfers. mitigate bias, buffer period based data availability hospital applied readmission calculation. episode’s discharge time buffer period, epicare excluded denominator (readmitX=NA) readmission rates. Buffer Period =  [ (Hospital’s last discharge date - Readmission window - Additional 30 days)  , (Hospital’s last discharge date) ] X number days specified readmission window must passed allow X-day readmission occur; 95% hospital admissions discharged within 30 days based GEMINI data. Therefore, patients discharged within buffer period, enough time readmission happen appear database; Since buffer period determined hospital’s data availability, possibility inter-hospital biases addressed. strive minimize potential biases, recognize complete elimination may feasible. Hypothetical example buffer period affects 7-day readmission patient:","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"customizable-features","dir":"Articles","previous_headings":"Introduction > readmission()","what":"Customizable features","title":"Episodes of care and Readmission","text":"CIHI flags: see Section 2 CIHI flags. Readmission time window: default, readmission() function computes 7-day 30-day readmission rates. Users option specify customized time window using readm_win argument. recommend exercise caution customizing readmission window, see Section 3.3 details. Restricted cohort: default, readmissions determined searching data database. may scenarios users want determine readmissions among records within restricted cohort. episodes_of_care() readmission() functions allow users input customized cohort using restricted_cohort argument. recommend exercise caution restricted cohort used, see Section 3.4 details.","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"cihi-readmission-rate-calculation","dir":"Articles","previous_headings":"Readmission: CIHI flags","what":"CIHI readmission rate calculation","title":"Episodes of care and Readmission","text":"total 8 CIHI flags function input arguments: elective_admit, death, MAID, palliative, chemo, mental, obstetric, signout. flag removes episodes using different criteria activated. details inclusion exclusion criteria discussed CIHI flags section CIHI website Rationale default definition readmission rate per CIHI definition explain two definitions since default definition GEMINI-specific, CIHI definition used MPR/OPR combinations flags potentially suitable different project needs Default definition: elective_admit flag death flag default TRUE readmission function. users set FALSE, warning messages displayed. remaining six flags default FALSE. Elective admission excluded since ’s planned. Thus, corresponding episode care ineligible readmission calculations therefore removed denominator. ’s impossible episode care ends death followed readmission, thus, corresponding episode care ineligible readmission calculations therefore removed denominator. CIHI definition: compute readmission rate adhering CIHI definition, 8 flags need set TRUE. main purpose 8 flags design match CIHI definition, however, come potential rationale corresponding flag sections reference Detailed flag definitions can found (comments readmission.R script)","code":"res <- readmission (db, elective_admit=T, death=T, MAID = T, palliative=T, chemo=T, mental=T, obstetric = T, signout = T) readmission_7d_derived_cihi = mean( res$readmit7, na.rm=T) readmission_30d_derived_cihi = mean( res$readmit30, na.rm=T)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"overview-of-numerator-denominator-removal-by-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags","what":"Overview of numerator & denominator removal by flag","title":"Episodes of care and Readmission","text":"8 CIHI flags, can set TRUE FALSE. Elective admission death flags active default. Activating given flag (e.g., chemo /self sign-flag) results removal numerator /denominator illustrated flow chart . Note flags (mental & palliative) result removal numerator denominator:","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"flag-details","dir":"Articles","previous_headings":"Readmission: CIHI flags","what":"Flag details","title":"Episodes of care and Readmission","text":"Disclaimer: examples (focus red text tables) mock final outputs readmission.R","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"elective-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"Elective flag","title":"Episodes of care and Readmission","text":"episode elective admit_category ‘L’ episode care considered elective FIRST encounter episode elective (admit_category = ‘L’) episode elective admissions removed numerator","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"death-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"Death flag","title":"Episodes of care and Readmission","text":"episode ends death episode discharge death (DAD Discharge Disposition Code = 07, 72, 73, 74) index admission results death, readmission. Therefore, episodes care death excluded denominator (reamitX=NA)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"maid-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"MAID flag","title":"Episodes of care and Readmission","text":"Rationale exclusion: MAID (medical assistance dying) planned doesn’t reflect quality care 2018-04-01: episode MAID discharge disposition=73 2018-04-01: episode MAID genc_id epicare discharge disposition=7 3 records drugs (1st drug lets patient relax, 2nd drug stops heart beat, 3rd drug stops brain function; indicated intervention_codes loaded) epicare encounter MAID, considered true readmission removed numerator. Note: death = T, epicare MAID (results death) additionally removed denominator. death = F, epicare MAID kept denominator. general recommendation set death T MAID T.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"self-sign-out-lama-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"self sign-out / LAMA flag","title":"Episodes of care and Readmission","text":"Rationale exclusion: self sign-doesn’t reflect physicians’ decisions discharge doesn’t reflect quality care LAST encounter episode care discharge disposition = self sign-(.e. LAMA - left medical advice: 61, 62, 65, 66, 67), episode removed denominator avoid attribution potential readmission physician Note: self sign-excluded based CIHI definition, GEMINI DB doesn’t capture different physician practices philosophies regarding self sign-(eg. Amol never codes self sign-since believes ’s patients’ right leave ), self sign-information recorded paper.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"palliative-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"palliative flag","title":"Episodes of care and Readmission","text":"Rationale exclusion: palliative care acute care can scheduled extent, therefore, doesn’t reflect quality care episode palliative care diagnosis code (ICD-10-CA: Z51.5) type MRDx episode care includes encounter palliative care responsible discharge diagnosis, removed numerator denominator","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"chemo-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"chemo flag","title":"Episodes of care and Readmission","text":"Rationale exclusion: palliative flag episode chemotherapy diagnosis code (ICD-10-CA: Z51.1) type (M), (1), (C), (W), (X) (Y) episode care (epicare) includes encounter chemotherapy, entire epicare considered chemotherapy episode. Readmission chemotherapy considered true readmission, removed numerator.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"mental-health-flag","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"mental health flag","title":"Episodes of care and Readmission","text":"Rationale exclusion: palliative flag episode mental health falls MCC=17 episode care includes encounter mental health diagnosis, removed numerator denominator","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"obstetric-delivery","dir":"Articles","previous_headings":"Readmission: CIHI flags > Flag details","what":"obstetric delivery","title":"Episodes of care and Readmission","text":"Rationale exclusion: palliative flag episode obstetric delivery diagnosis codes (ICD-10-CA: O10–O16, O21–O29, O30–O37, O40–O46, O48, O60–O69, O70–O75, O85–O89, O90–O92, O95, O98, O99 sixth digit 1 2; Z37 recorded diagnosis field) Episodes care encounter obstetric delivery considered true readmission, therefore removed numerator","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"practical-examples-special-scenarios","dir":"Articles","previous_headings":"","what":"Practical examples & special scenarios","title":"Episodes of care and Readmission","text":"flow chart provides overview readmission calculations can customized different research purposes. Depending research context, may able use derived readmission variables DB (see Section 3.1). Alternatively, can run readmission function customized CIHI flags (Section 3.2), customized readmission window (Section 3.3), /restricted readmission cohort (Section 3.4):","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"sectionderived","dir":"Articles","previous_headings":"Practical examples & special scenarios","what":"Using derived variables in DB","title":"Episodes of care and Readmission","text":"use: get default/CIHI definition 7-/30-day readmission, including readmissions GEMINI hospital & medical subservice use: Query derived_variables table, contains two commonly used definitions 7- 30-day readmission: Default definition readmission (excluding elective readmissions death): readmission_7d_derived/readmission_30d_derived CIHI definition readmission (exclusion flags, see Section 2): readmission_7d_derived_cihi/readmission_30d_derived_cihi Example: 7-day readmission rates patients phase-1 sites: examples: MPR/OPR readmission rates Descriptive analyses general readmission rates Comparing overall readmission rates patients certain diagnoses/treatments … Note: derived variables based entire GEMINI DB. , consider readmissions medical service GEMINI hospital. reason, reflect overall/general readmission rates, common variable interest many research projects. However, may cases need run readmission function subset database using restricted_cohort argument (see Section 3.4).","code":"# get derived readmissions for phase-1 sites readm <- dbGetQuery(db, \"SELECT readmission_7d_derived FROM derived_variables                      WHERE hospital_id IN ('SMH', 'SBK', 'UHNTW', 'UHNTG', 'MSH', 'THPC', 'THPM');\")  mean(readm$readmission_7d_derived, na.rm = T)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"sectioncustomCIHI","dir":"Articles","previous_headings":"Practical examples & special scenarios","what":"Customizing CIHI flags","title":"Episodes of care and Readmission","text":"derived variables DB provide readmission values default & CIHI definitions readmission, common definitions used GEMINI research projects/reports. However, another definition required specific research purposes, users can specify customized CIHI flags setting 8 CIHI flags either TRUE FALSE (see Section 2 details). example, run code exclude MAID (addition excluding elective admissions & death set TRUE default):","code":"readmission(db, MAID=T)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"sectionrewin","dir":"Articles","previous_headings":"Practical examples & special scenarios","what":"Specifying custom readmission window","title":"Episodes of care and Readmission","text":"default, readmission function calculates 7- 30-day readmission. Users can provide additional input argument readm_win contains readmission window(s) interest (days). Example: Get 14-, 90-, 180- day readmission. readmission windows provided positive integers. Otherwise, function exit error message. Note: Large readmission windows can lead exclusion high percentage encounters end data availability timeline. function can calculate readmissions patients whose index encounter prior buffer period. buffer period depends length readmission window (e.g., 14/90/180 days) + additional 30 days (see Section 1.2.2). Therefore, buffer period longer large readmission windows, can lead exclusion many patients. especially problematic cohort interest towards end data availability timeline (e.g., 2021-2022 data). function show following warning 25% cohort excluded due buffer period /due CIHI flags:","code":"readm <- readmission(db, readm_win = c(14, 90, 180))  # specify readmission windows in days # Example of readmission rates for data from June 2021, resulting in a high % of encounters in the buffer period  readm <- readmission(db, restricted_cohort = admdad[ymd_hm(discharge_date_time) >= \"2021-06-01 00:00\",]) #> Warning: Up to 41.3% of episodes of care have been removed from the denominator. This can be due to #>         1) some CIHI flags (death/palliative/mental/signout) or #>         2) removal due to the buffer period, which is 30 days + readmission window. #>         The removal due to the buffer period was 20.5%/33.4% for 7/30-day readmission. #>         Readmission rate estimates might be unreliable! Please consider re-calculating #>         readmission rates with shorter readmission windows or with a larger cohort."},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"sectionrecohort","dir":"Articles","previous_headings":"Practical examples & special scenarios","what":"Running readmission function with restricted_cohort","title":"Episodes of care and Readmission","text":"can run readmission function subset DB providing optional restricted_cohort input. 2 main reasons restrict cohort: REB protocol research project cover encounters DB, want analyse readmissions certain hospitals/subservices due specific research question. cases, restricted_cohort provided data.table containing genc_id column relevant encounters. use restricted_cohort due REB considerations, restricted_cohort include genc_ids covered REB (see Section 3.4.1 details). contrast, want filter cohort due specific research question, recommended filter episodes care order keep linked transfers DB (see Section 3.4.2 details). Important: Running readmission function restricted_cohort means encounters included restricted cohort used derive episodes care readmissions. encounters excluded computations. warning message shown restricted_cohort argument provided notify user computations readmission function (including internal call episodes_of_care) limited provided cohort. Please carefully consider using restricted_cohort appropriate/necessary case! can ignore warning message confident restricted_cohort required sure built restricted_cohort correctly (based genc_ids REB scenarios vs. based epicares scenarios).","code":"#> Warning: Note: Based on the user input, epicares will be computed solely based #> on the user specified cohort, instead of the default method. The default method #> computes epicares based on all available data in GEMINI database and is #> recommended."},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"sectionrecohort1","dir":"Articles","previous_headings":"Practical examples & special scenarios > Running readmission function with restricted_cohort","what":"Restricting the cohort due to REB protocol","title":"Episodes of care and Readmission","text":"use: REB protocol study cover encounters DB use: Provide restricted_cohort argument includes genc_ids covered REB Example: REB protocol research project covers GIM encounters 5 hospitals. case, important ensure encounters included readmission function, encounters DB ignored. resulting readmission rates include readmissions GIM services 5 hospitals included. Note results may less reliable readmissions derived based whole DB due loss information transfers hospitals/subservices included restricted_cohort. Specifically, readmission function internally calls episodes_of_care function, inherits restricted_cohort provided readmission function. Therefore, encounters part restricted_cohort excluded reamdission calculations generation episodes care. Note: want calculate episodes care (without calculating readmissions) cohort REB restrictions, can also run episodes_of_care function isolation provide restricted_cohort input ensure analyses compliant REB. example, derive episodes care GIM encounters 5 hospitals: unsure encounters covered project’s REB protocol, please contact manager!","code":"# note: users needs to define their own GIM_cohort table based on the criteria they want to use to define GIM encounters readm <- readmission(db, restricted_cohort = GIM_cohort[hospital_num %in% c(101,102,103,104,105),]) # note: users needs to define their own GIM_cohort table based on the criteria they want to use to define GIM encounters epicares <- identify_epicare(db, restricted_cohort = GIM_cohort[hospital_num %in% c(101,102,103,104,105),])"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/epicare_and_readmission.html","id":"sectionrecohort2","dir":"Articles","previous_headings":"Practical examples & special scenarios > Running readmission function with restricted_cohort","what":"Restricting the cohort due to research question","title":"Episodes of care and Readmission","text":"use: calculate readmissions specific hospitals/subservices (e.g., readmission GIM ) include/exclude certain encounters readmission calculation due research context (e.g., readmission specific Dx) use: calculate readmission rates consider readmissions certain hospitals/subservices/encounters, can run readmission function using restricted_cohort. restricting cohort due REB considerations done filtering strictly based genc_id (see ), restricting cohort due specific research questions done based episodes care order ensure linked transfers considered readmission calculations. Specifically, hospitalizations interest, linked encounters given episode care included. Please carefully read examples gain better understanding create restricted_cohort research purposes. Example 1: Calculating frequently GIM patients readmitted GIM services: order analyze readmissions GIM patients GIM services, restricted_cohort include encounters episodes care least one GIM encounter. , even non-GIM encounters included long associated epicare GIM encounters interest. ensures linked transfers included readmission calculation, minimizes chance encounters inaccurately labelled readmissions due missing transfer information. resulting readmission rates indicate whether GIM readmission given GIM patient within 7-/30-day time window. readmissions necessarily first readmission index epicare! example, GIM patient may non-GIM readmission initial epicare, ignored calculation . Therefore, interpretations causes readmission done carefully may intermediate epicares readmissions attributed considered due use restricted_cohort. Example 2: Calculating readmission rates COVID patients readmitted COVID diagnosis. case, restricted_cohort include episodes care encounter COVID diagnosis. example 1, linked encounters (even without COVID diagnosis) included make sure available transfer information used readmission calculations. resulting readmission rates indicate whether patients COVID readmission COVID diagnosis within 7-/30-day time window. readmissions necessarily first readmission index epicare COVID diagnosis! , may intermediate, non-COVID epicares, ignored readmission calculations. Note: examples , highlighted italic parts sentence (specify patients readmitted ) necessitate using restricted_cohort. want filter cohort according patients readmitted , use restricted_cohort argument. Instead, simply query derived variables cohort interest (see example Section 3.1) make sure including readmissions hospitals/medical subservices. special scenarios: may complex scenarios inclusion criteria index admissions (“readmission ”) different inclusion criteria readmission encounters (“readmission ”). example, might want analyze readmission rates surgery patients readmitted GIM. case, restricted_cohort include epicares meet criteria index admissions plus epicares meet criteria readmissions. need use several steps create restricted_cohort: Select encounters episodes care meet criteria index admissions: example scenario, include encounters epicares least one surgery encounter. want consider readmissions GIM, include single surgery episode care per patient order avoid subsequent surgeries counted readmissions. Select encounters episodes care meet criteria readmissions: example, qualify GIM readmission, include encounters epicares ) occurred index surgery admission b) least one GIM encounter. Note: implication step intermediate non-GIM epicares ignored. Combine encounters step 1 & 2 create restricted_cohort interest. Run readmission function restricted_cohort. Calculate readmission rates: Filter output readmission function based index admissions (cohort created step 1) order get readmission rates surgery patients GIM. step important avoid admissions following GIM epicares (e.g., GIM GIM readmissions GIM surgery readmissions) included readmission rates. steps meant general guideline, may need consider additional aspects given research project. Please make sure carefully consider implications decisions make building restricted_cohort. also need consider additional REB restrictions apply, case restricted_cohort filtered based REB considerations first applying additional inclusion steps.","code":"## Calculate epicares based on ALL encounters in DB (to ensure linked transfers are included) epicares <- episodes_of_care(db)  ## Identify all epicares that have at least 1 GIM encounter  # note: users needs to define their own GIM_cohort table based on the criteria they want to use to define GIM encounters GIM_epicares <- epicares[genc_id %in% GIM_cohort$genc_id, 'epicare']  ## Get all encounters associated with GIM epicares (keep all encounters of those epicares, even those without GIM to make sure all linked transfers are accounted for) GIM_epicares_all_enc <- epicares[epicare %in% GIM_epicares$epicare, 'genc_id']   ## Calculate readmissions to GIM (considering all linked transfers in DB) GIM_readm <- readmission(db, restricted_cohort = GIM_epicares_all_enc)  ## Get 7-day readmission rate of GIM patients to GIM  # note: numerator/denominator are based on unique GIM epicares, not GIM encounters (i.e., there may be several GIM encounters associated with a single GIM epicare, but those are only counted once; readmission is attributed to the last encounter within each GIM epicare) mean(GIM_readm$readmit7, na.rm = T) ## Get all encounters with COVID diagnosis COVID_enc <- ipdiagnosis[grepl('^U07',diagnosis_code),'genc_id']  ## Calculate epicares based on ALL encounters in DB (to ensure linked transfers are included) epicares <- episodes_of_care(db)  ## Identify all epicares that have at least 1 COVID encounter  COVID_epicares <- epicares[genc_id %in% COVID_enc$genc_id, 'epicare']  ## Get all encounters associated with COVID epicares (keep all encounters of those epicares, even those without COVID diagnosis to make sure all linked transfers are accounted for) COVID_epicares_all_enc <- epicares[epicare %in% COVID_epicares$epicare, 'genc_id']   ## Calculate readmissions with COVID diagnosis (considering all linked transfers in DB) COVID_readm <- readmission(db, restricted_cohort = COVID_epicares_all_enc)  ## Get 30-day readmission rate of COVID patients, only counting readmissions that also have a COVID diagnosis  # note: numerator/denominator are based on unique COVID epicares, not COVID encounters (i.e., there may be several COVID encounters associated with a single epicare, but those are only counted once; readmission is attributed to the last encounter within each COVID epicare) mean(COVID_readm$readmit30, na.rm = T)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"overview-background","dir":"Articles","previous_headings":"","what":"Overview & background","title":"ICD to CCSR","text":"icd_to_ccsr function returns CCSR (Clinical Classifications Software Refined) categories user-specified set diagnosis codes. CCSR provides grouping individual ICD-10 diagnosis codes broader, clinically meaningful disease categories. original CCSR grouping developed based US ICD-10-CM codes. GEMINI developed algorithm mapping Canadian diagnosis codes (ICD-10-CA) CCSR categories. full mapping procedure described . purpose vignette provide practical guide apply icd_to_ccsr function different research contexts, analyze outputs provided function. details inner workings function , please refer function documentation (?icd_to_ccsr).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"when-and-why-to-use-ccsr","dir":"Articles","previous_headings":"","what":"When and why to use CCSR","title":"ICD to CCSR","text":"currently 70,000 unique ICD-10 codes, additional country-specific variations. ICD-10 codes contain fine-grained diagnosis details may relevant research purposes. CCSR aggregates individual diagnosis codes ~540 clinically relevant categories across 22 body systems. full list current CCSR categories can found . CCSR facilitates disease-specific healthcare utilization outcome well dimensionality reduction statistical modeling. CCSR categories particularly useful analyzing large, heterogeneous cohorts (e.g., GIM patients). cases, grouping patients broad disease categories can provide important insights patient case mix allows meaningful comparison baseline characteristics clinical outcomes across different patient sub-populations (see Example applications CCSR) . use CCSR: research studies focus single, well-defined condition (e.g., COVID-19), often better simply filter cohort specific ICD-10-CA code(s) interest (e.g., U071 = confirmed COVID-19) instead using broader disease categories might result loss information specificity. Additionally, conditions CCSR category. example, CCSR category delirium. Instead, diagnosis codes associated delirium grouped CCSR category NVS011 = “Neurocognitive disorders”, together large range neurocognitive disorders. decision whether use ICD-10-CA codes vs. CCSR categories made project--project basis researchers need carefully consider approach appropriate analyses.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"running-icd_to_ccsr-with-default-arguments","dir":"Articles","previous_headings":"","what":"Running icd_to_ccsr() with default arguments","title":"ICD to CCSR","text":"run icd_to_ccsr function, users need provide 1) valid database connection 2) dxtable input containing diagnosis codes interest. Typically, dxtable created based ipdiagnosis table (subset thereof) GEMINI database, contains diagnosis codes assigned genc_id. example load relevant data run icd_to_ccsr function default settings: Mock output table icd_to_ccsr(): function returns GEMINI-derived ICD--CCSR mappings. row output corresponds single ICD-10-CA code (diagnosis_code) given encounter (genc_id). diagnosis code returned description (diagnosis_code_desc) one multiple (6) CCSR categories (ccsr_1 ccsr_6). One CCSR category assigned default category (ccsr_default), corresponds main disease group typically category interest analyses (see Example applications CCSR). output also contains description CCSR default category (ccsr_default_desc). Note: Although GEMINI-derived CCSR mappings validated medical expert, users advised spot-check output verify ICD-10-CA descriptions broadly match CCSR default descriptions. Please inform GEMINI team case identify inconsistencies. Moreover, please note mappings may subject change continuously update database ensure consistency official CCSR tool.","code":"# Load required libraries library(RPostgreSQL) library(DBI) library(getPass)  # Establish database connection db <- DBI::dbConnect(drv,                      dbname = \"DB_name\",                      host = \"172.XX.XX.XXX\",                      port = 1234,                      user = getPass(\"Enter user:\"),                      password = getPass(\"Enter Password:\"))  # query relevant columns of ipdiagnosis table ipdiagnosis <- dbGetQuery(db, \"SELECT genc_id, diagnosis_code, diagnosis_type FROM ipdiagnosis;\")   # Run default version of icd_to_ccsr          ipdiagnosis_ccsr <- icd_to_ccsr(db, dxtable = ipdiagnosis)   head(ipdiagnosis_ccsr, 10)"},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"type_mrdx","dir":"Articles","previous_headings":"Optional input arguments","what":"type_mrdx","title":"ICD to CCSR","text":"default: TRUE illustrated example output table , function default returns responsible diagnosis (MRDx) code per genc_id. , single row per encounter returned, contains type-M (type-6 present) diagnosis (line CIHI definition MRDx; see page 13). users want obtain CCSR categories diagnosis types, input argument type_mrdx can set FALSE, follows: case, function apply filtering diagnosis type, instead, return rows original input table. Note output contains multiple rows per genc_id, corresponding different diagnosis types. information diagnosis type coding, see . Mock output table icd_to_ccsr() type_mrdx = FALSE:","code":"ipdiagnosis_ccsr <- icd_to_ccsr(db, ipdiagnosis, `type_mrdx` = FALSE)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"unique_mrdx","dir":"Articles","previous_headings":"Optional input arguments","what":"unique_mrdx","title":"ICD to CCSR","text":"default: FALSE Typically, encounter exactly one MRDx code. However, certain circumstances, function may identify encounters multiple MRDx codes (e.g., two type-M diagnosis codes). due data quality issues, can happen users combine -patient ED diagnoses create long-table format pre-processing data. default, function show warning encounters multiple MRDx codes found, run usual return multiple rows encounters 1 MRDx. users want requirement unique MRDx strict, can specify unique_mrdx = TRUE, cause function terminate encounters multiple MRDx codes found. case, users advised carefully check input table remove entries causing error message. Note input argument relevant type_mrdx set TRUE, otherwise, ignored.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"replace_invalidpdx","dir":"Articles","previous_headings":"Optional input arguments","what":"replace_invalidpdx","title":"ICD to CCSR","text":"default = TRUE diagnosis codes returned ccsr_default = \"XXX000\", indicates diagnosis code “unacceptable principal diagnosis” (invalid PDX) according US diagnostic coding following Medicare Code Edits guidelines (see details). Since CCSR default category meant reflect main disease category (~MRDx), official CCSR tool sets ccsr_default \"XXX000\" codes valid PDX/MRDx. Many external cause diagnosis codes (diagnosis_type = 9) fall category meant coded MRDx, thus, returned ccsr_default = \"XXX000\". Note codes still valid ccsr_1 (ccsr_6) categories: Example codes ccsr_default = \"XXX000\": type_mrdx = TRUE, invalid PDX categories typically rare. However, due country-specific differences coding mapping ambiguity ICD-10-CA codes, users may find even type M/6 (MRDx) codes returned CCSR default category \"XXX000\". usually affects injury/poisoning codes codes starting “Z”, including pregnancy-related, procedural, health status/personal history codes: Example MRDx codes ccsr_default = \"XXX000\": invalid PDX category line coding insurance purposes, however, typically meaningful research contexts can result loss information. example, scenario shown , users may still want group patient diagnosis_code = \"Z37000\" relevant, pregnancy-related CCSR category. fact, code assigned CCSR 1 category \"PRG030\" (“Maternal outcome delivery”), contains useful information encounter. function therefore provides optional input argument replace_invalidpdx overwrite \"XXX000\" values one (valid) CCSR 1-6 categories. fact, replace_invalidpdx set TRUE default given research projects, distinction valid vs. invalid principle diagnosis coding may relevant (, determined based diagnosis_type instead mapped CCSR category). Additionally, users may specifically interested CCSR groups diagnosis types (type_mrdx = FALSE), case definition CCSR default categories valid vs. invalid PDX categories meaningful. example, replace_invalidpdx set TRUE (default), \"XXX000\" replaced \"PRG030\" diagnosis code \"Z37000\": Example output illustrating replace_invalidpdx = TRUE: Note: Invalid PDX CCSR categories replaced follows: codes mapped single CCSR category, \"XXX000\" replace ccsr_1 category. codes mapped multiple CCSR categories, function chooses CCSR 1-6 category common default category among diagnosis codes ICD-10 chapter (first 3 characters). Otherwise, still result mapping \"XXX000\" (e.g., codes chapter mapped \"XXX000\"), function defaults ccsr_1.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"missing-vs--unmapped-diagnosis-codes","dir":"Articles","previous_headings":"","what":"Missing vs. unmapped diagnosis codes","title":"ICD to CCSR","text":"entries output table might missing CCSR default categories (.e., .na(ccsr_default)). can due either 1) missing/empty diagnosis codes 2) diagnosis codes mapped CCSR categories. Users can distinguish two scenarios based ccsr_default_descr, either 1) \"Missing diagnosis code\" 2) \"Unmapped\".","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"missing-diagnosis-codes","dir":"Articles","previous_headings":"Missing vs. unmapped diagnosis codes","what":"Missing diagnosis codes","title":"ICD to CCSR","text":"Diagnosis codes returned ccsr_default_desc = \"Missing diagnosis code\" refer entries dxtable input diagnosis_code NA NULL, example: Mock output table showing missing diagnosis codes: typically due data quality issues affect small number encounters. type_mrdx set TRUE, encounters rows containing type-6 type-M diagnosis also returned ccsr_default = \"Missing diagnosis code\" (diagnosis_code = NA). ensure number rows output table corresponds number unique encounters provided dxtable input. function additionally show warning message inform users encounters missing MRDx codes found.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"unmapped-diagnosis-codes","dir":"Articles","previous_headings":"Missing vs. unmapped diagnosis codes","what":"Unmapped diagnosis codes","title":"ICD to CCSR","text":"rows ccsr_default = \"Unmapped\", valid ICD-10-CA diagnosis code exists, however, code mapped CCSR categories (yet). example: Mock output table showing unmapped diagnosis codes: Type-4 morphology codes (e.g., row 1 example output ) always returned \"Unmapped\" since numeric codes based ICD-0 (oncology) diagnoses, meant mapped CCSR categories. diagnosis types, codes returned \"Unmapped\" simply mapped GEMINI team yet. constantly update database add new ICD-10-CA codes strive provide mappings many codes possible. However, team prioritizes mapping MRDx diagnosis codes. Therefore, unmapped codes likely occur users run icd_to_ccsr() function type_mrdx = FALSE. users plan analyse CCSR categories non-MRDx codes find high percentage codes unmapped, recommend using publicly available GEMINI CCSR mapping algorithm, enables (semi-)automatic ICD--CCSR mapping. details use algorithm, please get touch GEMINI team.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"examples","dir":"Articles","previous_headings":"","what":"Example applications of CCSR","title":"ICD to CCSR","text":"examples illustrate common applications CCSR clinical research.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"patient-case-mix","dir":"Articles","previous_headings":"Example applications of CCSR","what":"Patient case mix","title":"ICD to CCSR","text":"Analyzing frequency CCSR default category large, heterogeneous cohorts can provide important insights patient case mix. example, running icd_to_ccsr() function MRDx codes typical GIM cohort, 5 common CCSR default categories among GIM patients can obtained follows: Mock output table showing top 5 frequent CCSR default categories GIM cohort: Users additionally analyse cumulative percentage patients across CCSR categories determine number unique disease categories accounting 50% (75%/90%…) patients. provides useful quantitative measure breadth conditions managed given hospital/medical ward.","code":"library(data.table)  ccsr_summary <- ipdiagnosis_ccsr[, .(N = .N, `% patients` = .N/nrow(ipdiagnosis_ccsr) * 100),                                   by = c(\"ccsr_default\",\"ccsr_default_desc\")]  head(ccsr_summary[order(N, decreasing = TRUE)],5)"},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"risk-adjustment-using-ccsr","dir":"Articles","previous_headings":"Example applications of CCSR","what":"Risk adjustment using CCSR","title":"ICD to CCSR","text":"comparing clinical outcomes (e.g., mortality readmission rates) across patients/physicians/hospitals, important consider patients’ baseline characteristics, diagnosis group. Risk adjustment performed including CCSR categories predictors regression models, splitting cohorts different subgroups based patients’ CCSR default category. Risk adjustment CCSR also used analyzing quality care, resource usage, healthcare costs indicators. example, see Roberts et al. (2023) performing risk adjustment using CCSR GEMINI data.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"filtering-cohorts-by-ccsr-category","dir":"Articles","previous_headings":"Example applications of CCSR","what":"Filtering cohorts by CCSR category","title":"ICD to CCSR","text":"users want filter cohort certain diagnosis group, choose relevant CCSR category(s) list filter corresponding CCSR category number(s). example, filter genc_ids Septicemia, relevant CCSR category INF002. Users 2 options: Filter encounters INF002 CCSR default category: Filter encounters INF002 among CCSR 1-6 categories (recommended): difference two approaches CCSR default category meant main disease category. Focusing single category usually relevant users need ensure diagnosis code exactly one corresponding CCSR category. example, analyses previous section, patients grouped according default CCSR category don’t want double-count patients whose MRDx code mapped 1 CCSR category. contrast, filtering patients fit certain CCSR criterion, 1:1 mapping diagnosis code CCSR categories usually required. Instead, likely want capture patients CCSR category interest among mapped CCSR 1-6 categories. addition , official CCSR tool assigns default categories based hierarchical rules, .e., CCSR categories less likely default category others. example, diagnosis codes related diabetes, distinction diabetes vs. without complications (CCSR END003 vs. END002) takes priority distinction type 1 vs. type 2 diabetes (CCSR END004 vs. END005). result, researchers want filter encounters type-1 diabetes, searching CCSR default category alone result many relevant patients missed diabetes patients CCSR default categories END002 END003 (instead END004/END005). Therefore, general recommendation filtering cohorts CCSR category use CCSR 1-6 categories (option 2 shown ), instead filtering CCSR default alone. Additional notes filtering CCSR category: investigating specific, well-defined diseases, may appropriate filter individual ICD-10-CA codes instead relying broad CCSR categories. filtering CCSR category appropriate, users still verify individual ICD-10-CA codes included relevant research question. recommended always filter CCSR category number (\"INF002\") instead description (\"Septicemia\") category descriptions subject small changes newer releases official CCSR tool.","code":"# option 1: filter by CCSR default category only ipdiagnosis_ccsr <- ipdiagnosis_ccsr[ccsr_default==\"INF002\",] # option 2: filter by CCSR 1-6 (includes default category) ipdiagnosis_ccsr <- ipdiagnosis_ccsr[   rowSums(ipdiagnosis_ccsr[,c(\"ccsr_1\",\"ccsr_2\",\"ccsr_3\",\"ccsr_4\",\"ccsr_5\",\"ccsr_6\")] == \"INF002\",            na.rm = TRUE) > 0,]"},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/articles/icd_to_ccsr.html","id":"initial-vs--subsequent-encounters","dir":"Articles","previous_headings":"Additional considerations","what":"Initial vs. subsequent encounters","title":"ICD to CCSR","text":"diagnoses (e.g., injuries poisoning), US ICD-10 codes contain suffix differentiates initial vs. subsequent encounters. result, CCSR categories make distinction. example: INJ018 = “Crushing injury, initial encounter”, whereas INJ055 = “Crushing injury, subsequent encounter”. However, Canadian ICD-10 codes differentiate initial vs. subsequent encounters. Therefore, ICD-10-CA codes mapped “initial encounter” default. researchers interested analyzing patients’ medical history, rely CCSR description differentiate initial vs. subsequent encounters, instead, look encounter history given patient within database. generally, means CCSR description “initial” “subsequent” encounter GEMINI database ignored (.e., INJ018 = INJ055 = “Crushing injury”).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"GEMINIdata. Maintainer.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"team TG (2023). Rgemini: R Functions GEMINI Data. R package version 0.3.1, https://gemini-medicine.github.io/Rgemini/.","code":"@Manual{,   title = {Rgemini: R Functions for GEMINI Data},   author = {The GEMINI team},   year = {2023},   note = {R package version 0.3.1},   url = {https://gemini-medicine.github.io/Rgemini/}, }"},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"rgemini","dir":"","previous_headings":"","what":"R Functions for GEMINI Data","title":"R Functions for GEMINI Data","text":"Rgemini (GEMINI) custom R package provides variety functions perform data analyses GEMINI data. functions developed GEMINI team tested current version GEMINI database.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Functions for GEMINI Data","text":"Rgemini currently yet available CRAN. development version can installed GitHub following:","code":"remotes::install_github(\"GEMINI-Medicine/Rgemini\", build_vignettes = TRUE)"},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"alternatives","dir":"","previous_headings":"Installation","what":"Alternatives","title":"R Functions for GEMINI Data","text":"installation method work, try one following: Install using pak::pkg_install(\"GEMINI-Medicine/Rgemini\"). git clone package directory /path//repo, run devtools::install(\"/path//repo\", build_vignettes = TRUE). Download latest source tarball package releases directory /path//tarball run install.packages(\"/path//tarball\", repos = NULL, type=\"source\"). none methods work, please create post discussion board.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"hpc4health","dir":"","previous_headings":"Installation","what":"HPC4Health","title":"R Functions for GEMINI Data","text":"installing Rgemini GEMINI HPC4Health environment, simply call install.packages(\"Rgemini\"). R script dependency Rgemini like run script Slurm, please point library call local folder Rgemini installed. example:","code":"library(Rgemini, lib.loc = \"$HOME/R/x86_64-pc-linux-gnu-library/4.1\")"},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R Functions for GEMINI Data","text":"functions require access GEMINI database. access, functions can used follows: Please review extensive package documentation vignettes detailed examples sample code.","code":"library(Rgemini)  drv <- DBI::dbDriver(\"PostgreSQL\")  db <- DBI::dbConnect(   drv,   dbname = \"db_name\",   host = \"172.XX.XX.XXX\",   port = 1234,   user = getPass::getPass(\"Enter Username\"),   password = getPass::getPass(\"Enter Password\") )  admdad <- DBI::dbGetQuery(   db,   \"SELECT * FROM public.admdad LIMIT 200;\" )  readm <- readmission(   db = db,   elective_admit = TRUE,   death = TRUE,   MAID = TRUE,   palliative = TRUE,   chemo = TRUE,   mental = TRUE,   obstetric = TRUE,   signout = TRUE,   restricted_cohort = admdad,   readm_win = c(7, 30, 60, 90, 150) )"},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"package-versions","dir":"","previous_headings":"","what":"Package versions","title":"R Functions for GEMINI Data","text":"Different versions Rgemini released X.Y.Z. increments following conventions: Z: Patch version, bug fixes, documentation, tests, changing argument defaults, optimizing internals function without affecting external interface (argument names etc). Y: Minor version, new function added, large changes existing functions (including even changes type number arguments). X: Major version, change underlying DB code written (table variable names). Usually ’d accumulate series changes develop release master version increment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"R Functions for GEMINI Data","text":"find Rgemini useful, please cite publications using citation(\"Rgemini\"): GEMINI team (2023). Rgemini: R Functions GEMINI Data. R package version 0.3.0. https://gemini-medicine.github.io/Rgemini/","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/charlson_comorbidity_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Charlson comorbidity index (CCI) score — charlson_comorbidity_index","title":"Compute Charlson comorbidity index (CCI) score — charlson_comorbidity_index","text":"Based methodology Quan et al. 2011 using ICD-10 codes mapping algorithm, implemented R comorbidity package Gasparini, 2018. Can compute either CCI score admission based HSMR Methodology entire patient encounter. default compute comorbidity admission.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/charlson_comorbidity_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Charlson comorbidity index (CCI) score — charlson_comorbidity_index","text":"","code":"charlson_comorbidity_index(   ipdiag,   erdiag,   at_admission = TRUE,   raw_comorbidities = FALSE )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/charlson_comorbidity_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Charlson comorbidity index (CCI) score — charlson_comorbidity_index","text":"ipdiag (data.table)ipdiagnosis table defined GEMINI Data Repository Dictionary. erdiag (data.table)erdiagnosis table defined GEMINI Data Repository Dictionary. at_admission (logical) Whether calculate charlson score comorbidities pre-admit comorbidities. raw_comorbidities (logical) Whether output data.table raw comorbidities opposed pre-computed charlson scores.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/charlson_comorbidity_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Charlson comorbidity index (CCI) score — charlson_comorbidity_index","text":"(data.table) default, encounter, outputs Charlson comorbidity index. raw_comorbidities TRUE, outputs wide data.table column comorbidity encounter.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/charlson_comorbidity_index.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Charlson comorbidity index (CCI) score — charlson_comorbidity_index","text":"hierarchy comorbidities used calculating Charlson score, outputting raw_comorbidites. affects comorbidities present patient different degrees severity. See documentation comorbidity::comorbidity() details.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/coerce_to_datatable.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to data.table — coerce_to_datatable","title":"Coerce to data.table — coerce_to_datatable","text":"Rgemini functions rely data.table operations assume input provided data.table format.  , coerce message ensure function logic works without breaking.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/coerce_to_datatable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to data.table — coerce_to_datatable","text":"","code":"coerce_to_datatable(data)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/coerce_to_datatable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to data.table — coerce_to_datatable","text":"data (data.frame data.table) data check class coerce data.table necessary.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/coerce_to_datatable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to data.table — coerce_to_datatable","text":"(data.table) original data provided argument, data.table.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/coerce_to_datatable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to data.table — coerce_to_datatable","text":"","code":"mtcars <- coerce_to_datatable(mtcars) #> Warning: mtcars was passed as a data.frame and has been coerced to a data.table"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/count_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Count missing — count_missing","title":"Count missing — count_missing","text":"function checks number missingness vector, returns results exact number (percentage)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/count_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count missing — count_missing","text":"","code":"count_missing(x)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/count_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count missing — count_missing","text":"x (vector)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"COVID Flag — covid_flag","title":"COVID Flag — covid_flag","text":"covid_flag returns COVID-19 diagnoses status hospital admissions based ICD-10-CA Return dataframe two separate flags identifying encounters confirmed suspected COVID-19 diagnoses using ICD-10-CA U071 U072 respectively confirmed COVID-19 diagnosis (U071) coded positive COVID-19 test regardless test type. suspected COVID-19 diagnosis (U072) coded encounter clinically epidemiological diagnosed associated COVID-19 tests inconclusive, available, performed.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COVID Flag — covid_flag","text":"","code":"covid_flag(cohort, diagnosis)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"COVID Flag — covid_flag","text":"cohort (data.frame data.table) Cohort table relevant encounters interest, row corresponds single encounter. Must contain GEMINI Encounter ID (genc_id). diagnosis (data.frame data.table) table equivalent DRM table \"ipdiagnosis\". Must contain two fields: genc_id diagnosis_code (ICD-10-CA). function handles long format table . Diagnosis codes must free special characters. user wishes use DRM table \"erdiagnosis\" instead combination \"ipdiagnosis\", sure rename field er_diagnosis_code diagnosis_code.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"COVID Flag — covid_flag","text":"data.table number rows input \"cohort\" additional derived boolean fields labelled \"covid_icd_confirmed_flag\" \"covid_icd_suspected_flag\". Possible values TRUE, FALSE NA. NA indicates encounter diagnosis code diagnosis table.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"COVID Flag — covid_flag","text":"function takes list admissions list ICD-10-CA generate boolean fields indicating whether admission confirmed suspected COVID-19 diagnoses. Function can take data frame object coerced data.table ICD-10-CA flags meant calculated based -patient diagnoses (ED diagnoses lower sensitivity/specificity certain conditions). Function differentiate diagnosis type. current ICD-10-CA codings related COVID-19. details, please refer references page. U07.1 : confirmed cases COVID-19, assign U07.1 Emergency use U07.1 (COVID-19, virus identified) U07.2 : suspected cases COVID-19, assign U07.2 Emergency use U07.2 (COVID-19, virus identified) U07.3 : Multisystem inflammatory syndrome associated COVID-19 U07.4 : post COVID-19 condition U07.5 : personal history COVID-19 U07.6 : Need immunization COVID-19. code use person encounters health services sole purpose receiving COVID-19 vaccine. U07.7 : COVID-19 vaccines causing adverse effect therapeutic use. emergency use code external cause code. code normally located ICD-10-CA block Y40-Y59 Drugs, medicaments biological substances causing adverse effects therapeutic use.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"COVID Flag — covid_flag","text":"Function returns data.table genc_id field two boolen fields. NA value output indicates encounter entry diagnosis table. one tries left-join output function another table (another list admissions left), make sure list admissions (patient) aligns tables.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"COVID Flag — covid_flag","text":"https://www.cihi.ca/en/covid-19-resources/covid-19-data-collection--coding-direction","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/covid_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"COVID Flag — covid_flag","text":"","code":"if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  ipadm <- dbGetQuery(dbcon, \"select * from admdad\") %>% data.table()  dx <- dbGetQuery(dbcon, \"select * from ipdiagnosis\") %>% data.table()  covid <- covid_flag(cohort = ipadm, diagnosis = dx) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/daily_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute daily census — daily_census","title":"Compute daily census — daily_census","text":"Calculates daily number patients hospitalized site specified time period. daily census defined cross-sectional count bed occupancy given time day (8am default). calculated number patients admitted discharged point time (.e., number patients occupied bed 8am day). Results returned raw counts well capacity ratio (= census/capacity). capacity ratio indicates whether number hospitalized patients particular day (>1) (<1) typical occupancy (max occupancy) time period interest. default, capacity estimated median(census) users can specify measures typical/max capacity (see capacity_func input). Note cohorts filtered/grouped based patient characteristics (e.g., diagnosis, age etc.), indicator simply reflects standardized measure patient counts, rather measure true capacity limitations medical wards.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/daily_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute daily census — daily_census","text":"","code":"daily_census(   cohort,   time_period = NULL,   scu_exclude = NULL,   group_var = NULL,   capacity_func = \"median\",   buffer = 30,   time_of_day = \"08:00:00\" )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/daily_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute daily census — daily_census","text":"cohort (data.frame data.table) Cohort table relevant encounters interest, row corresponds single encounter. Must contain following columns: genc_id (integer): GEMINI encounter ID hospital_num hospital_id (integer character): Hospital ID admission_date_time (character): Date-time admission YYYY-MM-DD HH:MM format discharge_date_time (character): Date-time discharge YYYY-MM-DD HH:MM format group_var specified (see ), included cohort table well. time_period (character) start end points study period, e.g., c('2019-01-01', '2019-12-31'). specified valid date format (e.g., 'yyyy-mm-dd'). scu_exclude (data.frame | data.table) Optional table containing special care unit (SCU) encounters. required patients SCU excluded census calculation time periods SCU. scu_exclude table typically refers ipscu table (see GEMINI database schema). However, users may want filter ipscu table specific SCU unit numbers excluded census calculation. Entries scu_unit_number = 99 (\"SCU\") automatically removed function. scu_exclude input table needs contain following columns: genc_id (integer): GEMINI encounter ID scu_admit_date_time (character): Date-time SCU admission YYYY-MM-DD HH:MM format scu_discharge_date_time (character): Date-time SCU discharge YYYY-MM-DD HH:MM format entries scu_exclude table valid scu_admit_date_time scu_discharge_date_time, encounter counted towards census time periods SCU (.e., time periods occupy bed non-SCU ward). input provided argument, exclusion applied. group_var (character) Optional input specifying one (multiple) grouping variables. Census numbers capacity ratio calculated separately level given grouping variable. Note: Users need specify hospital grouping variable since function automatically groups output hospital_num. Therefore, group_var specified additional grouping (e.g., different medical subservices, physicians etc.) required. Multiple grouping variables can provided character vector (e.g., group_var = c(\"medical_subservice\",\"physician\")). grouping variable specified (default: group_var = NA), function returns total daily census numbers capacity ratios per hospital. capacity_func (character) Optional input specifying function used define capacity capacity_ratio output. Can either measure central tendency obtain typical occupancy (median, mean, mode) max obtain maximum occupancy. capacity_ratio calculated census/capacity_func(census). Default median (.e., capacity_ratio = census/median(census)). \"mode\" selected census multiple modes, median modes used calculate capacity ratio. Note capacity calculated separately site (grouping variable, ). types measures (e.g., trimmed means), year--year capacity ratios calculated based raw census counts output (see vignette details). buffer (integer) Buffer period (days) applied end data availability period. Default 30 days, .e., census counts (capacity ratio) set NA last 30 days available data hospital. relevant time period interest towards end data availability period given hospital. example, time_period = c(\"2020-01-01\",\"2021-12-31\"), data available Dec 31 2021 hospital , census counts drop sharply last days Dec 2021 due \"truncation bias\". Specifically, example scenario, encounters hospital admitted prior Dec 31 2021, yet discharged. Due fact encounters appear GEMINI database discharged, census counts late December decline abruptly hospital patients discharged yet included database. prevent decrease patient numbers affecting census counts & capacity ratio, outputs set NA last 30 days hospital . default buffer period set 30 vast majority patients discharged within 30 days. , 30-day buffer period ensures admitted patients already discharged, thus, included data. However, users may specify different buffer period since length stays can vary widely cohorts. Therefore, users explore buffer period makes sense data work . Note data availability differs across hospitals. Therefore, actual buffer applied calculated separately hospital. hospital's data availability ends prior end time period interest, buffer includes last X days hospital's data (e.g., 30 days default). hospital's data availability goes past end time period interest, actual buffer applied based difference specified buffer latest available discharge date hospital. example, buffer = 30 given hospital 30 extra days data past time period interest, additional buffer applied. time_of_day (character | numeric) Optional input specifying time day census/capacity ratio calculated . Default 8am (time_of_day = \"8:00:00\"). times can specified character (e.g., \"10:30\" 10.30am) numeric input (e.g., 14 2pm).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/daily_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute daily census — daily_census","text":"(data.table) data.table daily counts hospitalized patients (census) hospital. Additionally, capacity_ratio (census relative typical occupancy time period interest) returned. Dates within time period interest data available given site included output. dates inside buffer period, census capacity_ratio returned NA.","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/reference/daily_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute daily census — daily_census","text":"","code":"## calculate census of all in-patient admissions (ipadm): if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  ipadm <- dbGetQuery(dbcon, \"select * from admdad\") %>% data.table()  ipadm_census <- daily_census(ipadm) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute day & time of hospital admissions — day_time_of_admission","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"day_time_of_admission returns whether patient admitted day/night time weekday/weekend.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"","code":"day_time_of_admission(ipadmdad, dtvar = \"admission_date_time\")"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"ipadmdad (data.table data.frame) Table relevant encounters interest DRM table \"ipadmdad\" (see GEMINI Data Repository Dictionary). Must contain two fields: genc_id date-time variable (typically admission_date_time). Date-time variable must \"yyyy-mm-dd hh:mm\" format. dtvar (character) Character string defining date-time variable interest (e.g., \"admission_date_time\").","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"data.table number rows input \"ipadmdad\", additional derived character fields labelled \"day_of_admission_derived\" \"time_of_admission_derived\". Possible values fields \"weekend\" \"weekday\" former, \"daytime\" \"nighttime\" latter.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"Day time defined 08:00 ~ 16:59, 17:00 ~ 07:59 Night time. Weekday Monday ~ Friday, weekend Sunday Saturday. classification might useful baseline admission characteristic Epidemiological studies.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"NA values returned data.table indicates either missing admission date time format incorrect.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/day_time_of_admission.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute day & time of hospital admissions — day_time_of_admission","text":"function takes optional input specifying field label date-time variable interest. default, admission_date_time users specify different variable (e.g., discharge_date_time). input can also used case differences variable names databases.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/diagnoses_at_admission.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Diagnoses at Admission — diagnoses_at_admission","title":"Determine Diagnoses at Admission — diagnoses_at_admission","text":"See CIHI's HSMR Methodology. Specifically page 19 inclusion/exclusion criteria.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/diagnoses_at_admission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Diagnoses at Admission — diagnoses_at_admission","text":"","code":"diagnoses_at_admission(ipdiag, erdiag)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/diagnoses_at_admission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Diagnoses at Admission — diagnoses_at_admission","text":"ipdiag (data.table)ipdiagnosis table defined GEMINI Data Repository Dictionary. erdiag (data.table)erdiagnosis table defined GEMINI Data Repository Dictionary.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/diagnoses_at_admission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Diagnoses at Admission — diagnoses_at_admission","text":"(data.table) encounters genc_id diagnosis_type diagnosis_code diagnoses admission.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_ccsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy CCSR data — dummy_ccsr","title":"Dummy CCSR data — dummy_ccsr","text":"Used generate mock output icd_to_ccsr vignette.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy daily census data — dummy_census","title":"Dummy daily census data — dummy_census","text":"Used generate mock output daily_census vignette.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Simulated Diagnosis Data Table — dummy_diag","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"function generates simulated data table resembling ipdiagnosis erdiagnosis tables can used testing demonstration purposes. internally calls sample_icd() function sample ICD-10 codes accepts arguments passed sample_icd() customizing sampling scheme.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"","code":"dummy_diag(nid = 5, nrow = 50, ipdiagnosis = TRUE, diagnosis_type = NULL, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"nid (integer) Number unique encounter IDs (genc_id) simulate. Value must greater 0. nrow (integer) Total number rows simulated long format diagnosis table. Value must greater equal nid. ipdiagnosis (logical) Default \"TRUE\" returns simulated \"ipdiagnosis\" table. FALSE, returns simulated \"erdiagnosis\" table. See tables GEMINI Data Repository Dictionary. diagnosis_type (character vector) type(s) diagnosis return. Possible diagnosis types (\"M\", 1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"9\", \"W\", \"X\", \"Y\"). Regardless diagnosis_type input, ipdiagnosis table defaulted always return type \"M\" first row encounter. ... Additional arguments ICD code sampling scheme. See sample_icd() details.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"(data.table) data table containing simulated data genc_id, (er)_diagnosis_code, (er)_diagnosis_type, hospital_num, fields found respective diagnosis table.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"ensure simulated table resembles \"ip(er)diagnosis\" table, following characteristics applied fields: genc_id:  Numerical identification encounters starting 1. number unique encounters defined nid. total number rows defined nrow, number rows encounter random, encounter least one row. hospital_num: Numerical identification hospitals 1 5. rows encounter linked single hospital diagnosis_code: \"ipdiagnosis\" table . Simulated ICD-10 diagnosis codes. encounter can associated multiple diagnosis codes long format. diagnosis_type: \"ipdiagnosis\" table . first row encounter consistently assigned diagnosis type \"M\". remaining rows, diagnosis_type specified users, diagnosis types sampled randomly values provided; diagnosis_type NULL, diagnosis types sampled (\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"9\", \"W\", \"X\", \"Y\"), sampling probability proportionate prevalence \"ipdiagnosis\" table. diagnosis_cluster: \"ipdiagnosis\" table . Proportionally sampled values prevalence 1% \"diagnosis_cluster\" field \"ipdiagnosis\" table, (\"\", \"\", \"B\"). diagnosis_prefix: \"ipdiagnosis\" table . Proportionally sampled values prevalence 1% \"diagnosis_prefix\" field \"ipdiagnosis\" table, (\"\", \"N\", \"Q\", \"6\"). er_diagnosis_code: \"erdiagnosis\" table . Simulated ICD-10 diagnosis codes. encounter can associated multiple diagnosis codes long format. er_diagnosis_type: \"erdiagnosis\" table . Proportionally sampled values prevalence 1% \"er_diagnosis_type\" field \"erdiagnosis\" table, (\"\", \"M\", \"9\", \"3\", \"O\").","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"following fields (er)diagnosis_code, (er)diagnosis_type, diagnosis_cluster, diagnosis_prefix simulated independently. Therefore, simulated combinations may reflect interrelationships fields actual data. example, specific diagnosis codes may associated specific diagnosis types, diagnosis clusters, diagnosis prefix reality. However, relationships maintained purpose generating dummy data. Users require specific linkages fields consider customizing output data manually generating desired combinations.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_diag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Simulated Diagnosis Data Table — dummy_diag","text":"","code":"### Simulate a erdiagnosis table for 5 unique subjects with total 20 records: if (FALSE)  set.seed(1)           erdiag <- dummy_diag(nid=5, nrow=20, ipdiagnosis=F)   ### Simulate a ipdiagnosis table with diagnosis codes starting with \"E11\": if (FALSE)  set.seed(1)           ipdiag <- dummy_diag(nid=5, nrow=20, ipdiagnosis=T, pattern =\"^E11\")   ### Simulate a ipdiagnosis table with random diagnosis codes in diagnosis type 3 or 6 only: if (FALSE)  set.seed(1)           ipdiag <- dummy_diag(nid=5, nrow=20, diagnosis_type=(c(\"3\", \"6\"))) %>%              filter(diagnosis_type!=\"M\") # remove default rows with diagnosis_type=\"M\" from each ID #> Error in dummy_diag(nid = 5, nrow = 20, diagnosis_type = (c(\"3\", \"6\"))) %>%     filter(diagnosis_type != \"M\"): could not find function \"%>%\"   ### Simulate a ipdiagnosis table with ICD-10-CA codes: if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  set.seed(1) ipdiag <- dummy_diag(nid=5, nrow=20, ipdiagnosis=T, dbcon=dbcon, source=\"icd_lookup\")}"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/dummy_ipdiagnosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy ipdiagnosis data — dummy_ipdiagnosis","title":"Dummy ipdiagnosis data — dummy_ipdiagnosis","text":"mimics GEMINI ipdiagnosis table. generated dummy_diag function. See GEMINI Data Repository Dictionary details.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify episodes of care — episodes_of_care","title":"Identify episodes of care — episodes_of_care","text":"episodes_of_care() function groups encounters linked via transfers single episode care. derived episodes care used readmission() function avoid counting transfers readmissions. Therefore, criteria transfers used function based CIHI guidelines readmission calculations. However, episodes_of_care function can also used independently compute episodes care outside readmission. Transfer information obtained GEMINI database table lookup_transfer (see GEMINI database schema). default, function queries encounters admdad table ensure encounters may linked via transfers accurately grouped episode care. Note: Users typically need calculate episodes care , rather use derived epicares variable GEMINI database, available. due fact derived variable calculated based available GEMINI encounters, therefore, provides accurate identification episodes care. contrast, datacuts cohorts pre-filtered may miss certain encounters, resulting loss information. However, certain situations, users may still find function useful 1) understand derived variable calculated 2) case users need re-calculate episodes care readmission rates restricted cohort (see ).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify episodes of care — episodes_of_care","text":"","code":"episodes_of_care(dbcon, restricted_cohort = NULL)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify episodes of care — episodes_of_care","text":"dbcon (DBIConnection) database connection GEMINI database. restricted_cohort (data.table | data.frame) User specified cohort restricted subset encounters DRM table \"ipadmdad\" (see GEMINI Data Repository Dictionary). Must contain genc_id identifier. Default Null, loads entire \"ipadmdad\" table user-provided database (recommended approach).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify episodes of care — episodes_of_care","text":"(data.frame) function returns data.table excluding records invalid patient_id_hashed, age < 18, admit_category cadaveric donors line CIHI guidelines. Nine columns returned: genc_id, patient_id_hashed, time_to_next_admission (numeric), time_since_last_admission (numeric), AT_in_coded (TRUE/FALSE), AT_out_coded (TRUE/FALSE), AT_in_occurred (TRUE/FALSE/NA), AT_out_occurred (TRUE/FALSE/NA), epicare (numeric)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify episodes of care — episodes_of_care","text":"episode care refers contiguous inpatient hospitalizations admitted medical intensive care service within GEMINI. Episodes involving inter-facility transfers linked regardless diagnosis. acute care transfer assumed occurred either following criteria met (see CIHI guidelines: admission occurs within 7 hours discharge, regardless whether transfer coded hospitals. 2) admission occurs within 7-12 hours discharge, least one hospital coded transfer. Acute transfers coded hospitals (AT_in_coded AT_out_coded) defined DAD fields institution_from institution_to: AT_in_coded/AT_out_coded TRUE, 'institution_from == \"\" 'institution_to == \"\". remaining entries set FALSE. Acute transfers actually occurred (AT_in_occurred AT_out_occurred) defined follows: AT_in_occurred/AT_out_occurred TRUE, admission within 7 hrs discharge regardless transfer coding, , admission within 7-12hrs discharge >=1 hospital coded transfer. AT_in_occurred/AT_out_occurred NA, admission time since previous discharge unknown =1 hospital coded transfer. determined transfer actually took place ornot.AT_in_occurred/AT_out_occurred FALSE, remaining entries. episode care (epicare) defined linked transfers identified based AT_in_occurred/ AT_out_occurred. unique numeric ID assigned unique episode care. , contiguous encounters linked transfers epicare number.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify episodes of care — episodes_of_care","text":"recommend users run function entire GEMINI data set (default setting) ensure transfers /omitted. Please review function documentation & vignette carefully. comprehensive understanding following concepts needed proper use function: transfer coded vs. transfer occurred, episode care definition.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify episodes of care — episodes_of_care","text":"CIHI guidelines","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/reference/episodes_of_care.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify episodes of care — episodes_of_care","text":"","code":"if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  epicare_table <- episodes_of_care(dbcon) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/find_db_tablename.html","id":null,"dir":"Reference","previous_headings":"","what":"Find DB table name using regex search. — find_db_tablename","title":"Find DB table name using regex search. — find_db_tablename","text":"Rgemini functions internally query DB tables. table names hard-coded functions since HPC datacuts sometimes slightly different table names (e.g., admdad called admdad_subset datacuts). function uses simple regex search identify full table name given DB matches DRM (Data Reference Model) table name interest. Currently, function supports subset table names (see ) expects relevant tables databases differ based suffix (e.g., \"admdad\" vs. \"admdad_subset\"). Specifically, table names, function uses grepl(\"^tablename\", drm_table) look table names start name specified DRM (e.g., 'admdad'). Exceptions \"lab\" \"transfusion\" tables. tables similar names (e.g., \"transfusion_mapping\" table), function specifically looks tables called either \"lab\"/\"transfusion\" \"lab_subset\"/\"transfusion_subset\" (HPC datacuts).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/find_db_tablename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find DB table name using regex search. — find_db_tablename","text":"","code":"find_db_tablename(dbcon, drm_table, verbose = TRUE)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/find_db_tablename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find DB table name using regex search. — find_db_tablename","text":"dbcon (DBIConnection) database connection GEMINI database. drm_table (character) Table name searched, based DRM. Currently accepts following inputs (verified work across different DBs/datacuts): \"admdad\" \"ipdiagnosis\" \"ipintervention\" \"ipcmg\" \"transfusion\" \"lab\" Users need specify full DRM table name (e.g., \"admdad\" instead \"adm\") avoid potential confusion tables. verbose (logical) Whether show message indicating DB table found.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/find_db_tablename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find DB table name using regex search. — find_db_tablename","text":"(character) Returns full name relevant DB table character.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/find_db_tablename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find DB table name using regex search. — find_db_tablename","text":"","code":"if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  admdad_name <- find_db_tablename(dbcon, \"admdad\")  # query identified table admdad <- dbGetQuery(dbcon, paste0(\"select * from \", admdad_name, \";\")) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute frailty score using ICD-10-CA — frailty_score","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"frailty_score returns frailty risk score hospital admissions calculated based ICD-10-CA diagnoses codes.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"","code":"frailty_score(cohort, ipdiagnosis, eddiagnosis)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"cohort (data.frame data.table) Cohort table relevant encounters interest, row corresponds single encounter. Must contain GEMINI Encounter ID (genc_id). ipdiagnosis (data.table) ipdiagnosis table defined GEMINI Data Repository Dictionary. table must contain genc_id diagnosis_code (ICD-10-CA) fields long format table . diagnosis codes must free punctuation special characters. eddiagnosis (data.table) eddiagnosis table defined GEMINI Data Repository Dictionary. table must contain genc_id er_diagnosis_code (ICD-10-CA) fields long format table . diagnosis codes must free punctuation special characters.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"data.table function returns table encounters identified cohort table input additional derived numeric fields ip_frailty_score_derived, er_frailty_score_derived frailty_score_derived ip_frailty_score_derived : Frailty risk score calculated using IP diagnoses codes ipdiagnosis table er_frailty_score_derived : Frailty risk score calculated using ED diagnoses codes eddiagnosis table frailty_score_derived : Frailty risk score calculated using IP & ED diagnoses codes frailty risk score < 5, patient low-risk frailty risk score 5 15, patient intermediate risk frailty risk score > 15.0, patient high risk","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"function takes list ICD-10-CA generates numeric field corresponding frailty risk score admission. function can take data.table ICD-10-CA codes. Historically, scores calculated based partition ICD-10-CA codes. Researchers may want focus frailty risk scores based -patient (IP) diagnoses emergency department (ED) diagnoses lower sensitivity/specificity certain conditions less reliably filled compared IP diagnoses. general, overlap IP ED diagnoses codes. ED diagnoses codes compute frailty risk score can used evaluate frailty risk upon admission IP services. function differentiate diagnosis types.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"original frailty risk score developed based ICD-10 codes instead ICD-10-CA. However, ICD-10-CA version codes identical ICD-10 counterpart 4 character levels frailty risk score uses first three characters ICD-10. Please refer references page details.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"function returns data.table genc_id three numeric fields. function return NA values genc_id cohort table found ipdiagnosis eddiagnosis tables. frailty_score_derived NA either ip_frailty_score_derived er_frailty_score_derived NA. one tries left-join output function another table (another list admissions left), make sure list admissions (patient ids) aligns tables.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/frailty_score.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute frailty score using ICD-10-CA — frailty_score","text":"Gilbert T, Neuburger J, Kraindler J, et al. Development validation Hospital Frailty Risk Score focusing older people acute care settings using electronic hospital records: observational study. Lancet 2018; published online April 26. http://dx.doi.org/10.1016/S0140-6736(18)30668-8.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/grapes-ni-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Not In — %ni%","title":"Not In — %ni%","text":"Infix function opposite %%.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/grapes-ni-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not In — %ni%","text":"","code":"x %ni% y"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/grapes-ni-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not In — %ni%","text":"x (vector NULL) values matched. Long vectors supported. y (vector NULL) values matched . Long vectors supported.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/grapes-ni-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not In — %ni%","text":"(logical) vector logical values length x, value represents whether particular element x exists y.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/grapes-ni-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not In — %ni%","text":"","code":"c('x', 'y') %ni% 'x' #> [1] FALSE  TRUE"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hospital fiscal year — hospital_fiscal_year","title":"Get hospital fiscal year — hospital_fiscal_year","text":"hospital_fiscal_year returns corresponding hospital fiscal years set dates provided.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hospital fiscal year — hospital_fiscal_year","text":"","code":"hospital_fiscal_year(date_ymd)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hospital fiscal year — hospital_fiscal_year","text":"date_ymd (character) character vector dates date-times. date value must yyyy-mm-dd format.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hospital fiscal year — hospital_fiscal_year","text":"Numeric vector number entries input, containing derived fiscal year input dates (e.g., 2010, 2011, 2012, ).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get hospital fiscal year — hospital_fiscal_year","text":"Hospital fiscal year defined April ~ March. example, case 2015-02-25, fiscal year 2014.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Get hospital fiscal year — hospital_fiscal_year","text":"NA values returned vector indicates either missing date format incorrect. dates must yyyy-mm-dd format precede timestamp (e.g., yyy-mm-dd hh:mm).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/hospital_fiscal_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hospital fiscal year — hospital_fiscal_year","text":"","code":"# Get fiscal year for `discharge_date_time` variable in `ipadmdad` table if (FALSE) { ipadmdad$fisc_year <- hospital_fiscal_year(ipadmdad$discharge_date_time) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icd_to_ccsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","title":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","text":"CCSR Clinical Classifications Software Refined provides grouping individual ICD-10 diagnosis codes broader, clinically meaningful disease categories. original CCSR grouping developed based US ICD-10-CM codes. GEMINI developed algorithm mapping Canadian diagnosis codes (ICD-10-CA) CCSR categories. full mapping procedure described . function returns GEMINI-derived CCSR mapping ICD-10-CA diagnosis diagnosis_table input. default, function return CCSR category(s) responsible discharge diagnosis (MRDx). typically refers type-M diagnoses, unless patient type-6 diagnosis (see CIHI definition MRDx page 13). Users can choose obtain CCSR categories diagnosis types setting type_mrdx FALSE.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icd_to_ccsr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","text":"","code":"icd_to_ccsr(   dbcon,   dxtable,   type_mrdx = TRUE,   unique_mrdx = FALSE,   replace_invalidpdx = TRUE )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icd_to_ccsr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","text":"dbcon (DBIConnection) database connection GEMINI database. dxtable (data.frame | data.table) Table containing ICD-10-CA diagnosis codes interest. Typically, refers ipdiagnosis table, contains CIHI -patient diagnoses encounter (see GEMINI database schema). different type diagnosis table provided input (e.g., erdiagnosis), please make sure table contains column named diagnosis_code (character) row refers single, alphanumeric diagnosis code consisting 3-7 characters. type_mrdx set TRUE, following additional columns required: genc_id (integer): GEMINI encounter ID diagnosis_type (character): Type diagnosis code according CIHI diagnosis type definitions. Note, encounter may multiple rows, referring diagnosis codes different types. However, typically, encounter single MRDx. case type_mrdx set TRUE, function return warning encounters multiple MRDx codes. default, encounters returned multiple rows (one per MRDx). However, users may specify unique_mrdx = TRUE (see ), cause function quit case multiple MRDx codes found. type_mrdx (logical) Flag indicating whether filter responsible discharge diagnosis. TRUE (default), MRDx codes (type 6 present, otherwise, type M) returned. option recommended typically return single diagnosis code per encounter. multiple MRDx codes found, warning message shown (unique_mrdx = TRUE, function stop). Additionally, function show warning encounters missing MRDx code. type_mrdx = FALSE, function return diagnosis codes (diagnosis type) present dxtable. case, customized filtering specific diagnosis types applied user outside function. using option, please refer function's vignette find potential issues interpreting default CCSR categories non-MRDx diagnosis types. unique_mrdx (logical) Flag indicating whether requirement unique MRDx code per encounter strict. relevant type_mrdx = TRUE. FALSE (default), multiple MRDx codes/encounter result warning inform user. function finish running return multiple rows per encounter. TRUE, function quit genc_ids multiple MRDx codes found user advised investigate cause multiple MRDx codes. replace_invalidpdx (logical) Flag indicating whether replace invalid default CCSR categories (default = TRUE). set FALSE, function return CCSR default categories derived based original US CCSR tool, may include ICD-10-CA codes ccsr_default = 'XXX000' (\"invalid PDX\"; see details). set TRUE (default), XXX000 values replaced one (valid) CCSR categories 1-6 mapped given code. Specifically, given ICD-10-CA code mapped single CCSR category (ccsr_1), XXX000 replaced category.  Otherwise, code mapped multiple CCSR 1-6 categories, function check one frequent CCSR default category among ICD-10-CA codes start first 3 characters (ICD-10 chapter). codes ICD-10 chapter share CCSR default category (default XXX000 ), ccsr_1 used default.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icd_to_ccsr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","text":"data.table function returns table containing ICD-10-CA diagnosis codes interest, together corresponding (GEMINI-derived) CCSR category(s). row output table, following variables returned: diagnosis_code: ICD-10-CA code diagnosis_code_desc: description ICD-10-CA code ccsr_default: default CCSR category, main disease group assigned diagnosis code typically main category interest used analyses. ccsr_default_desc: description CCSR default category ccsr_1 ccsr_6: 1-6 CCSR categories mapped given code. Although ccsr_default typically main category interest, ICD-10-CA codes mapped 1 (6) CCSR categories. circumstances, may interest analyse 1-6 CCSR categories, instead analyzing default CCSR. required, descriptions CCSR 1-6 categories can obtained lookup_ccsr table.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icd_to_ccsr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","text":"GEMINI-derived CCSR mappings validated clinical experts; however, users advised spot-check mappings ensure accuracy. Please notify GEMINI team encounter issues. mappings derived based older version CCSR (v2020.3) may subject change future updates. diagnosis codes, ccsr_default NA (ccsr_default_desc = 'Unmapped'), indicates diagnosis code mapped CCSR category yet. less likely happen type_mrdx set TRUE (default) since vast majority MRDx codes mapped GEMINI. Note: Type-4 morphology codes always returned 'Unmapped' since numeric codes based ICD-0 (oncology) diagnoses, meant mapped CCSR categories. diagnosis codes returned ccsr_default = 'XXX000', indicates diagnosis code valid -patient principal diagnosis (PDX) according US diagnostic coding following Medicare Code Edits guidelines (see . Due mapping ambiguity differences coding US Canada, may find ICD-10-CA MRDx codes returned 'XXX000'(invalid PDX). Additionally, clinical research projects, distinction valid vs. invalid principle diagnosis coding may relevant. Similarly, users interested CCSR groups diagnosis types (type_mrdx = FALSE), definition CCSR default categories valid vs. invalid PDX categories might meaningful. Therefore, default, replace_invalidpdx set TRUE. However, please carefully read documentation understand exactly invalid PDX categories replaced within function.","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icd_to_ccsr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify CCSR categories for ICD-10-CA diagnosis codes — icd_to_ccsr","text":"","code":"if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  dxtable <- dbGetQuery(dbcon, \"select * from ipdiagnosis\") %>% data.table() icd_to_ccsr(dbcon, dxtable) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute entry to Intensive Care Unit — icu_entry","title":"Compute entry to Intensive Care Unit — icu_entry","text":"Determines whether encounter entered Intensive Care Unit (ICU) hospital stay using CIHI Discharge Abstract Database (DAD) fields.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute entry to Intensive Care Unit — icu_entry","text":"","code":"icu_entry(cohort, ipscu, window = c(24, 48, 72))"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute entry to Intensive Care Unit — icu_entry","text":"cohort (data.table, data.frame) Cohort table relevant encounters interest, row corresponds single encounter. Must contain following columns: genc_id (integer): GEMINI encounter ID admission_date_time (character): Date-time admission YYYY-MM-DD HH:MM format ipscu (data.table, data.frame) Table equivalent ipscu table defined GEMINI Data Repository Dictionary. Table must contain fields: GEMINI Encounter ID (genc_id), SCU admission time (scu_admit_date_time), SCU number (scu_unit_number). window (integer, vector) Time window ICU entry since hospital admission, hours. default, window = c(24, 48, 72) calculate ICU entry within 24, 48 72 hours since hospital admission.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute entry to Intensive Care Unit — icu_entry","text":"(data.table) default, encounter input \"cohort\" returns corresponding derived boolean (TRUE/FALSE) fields \"icu_entry_derived\", \"icu_entry_in_24hr_derived\", \"icu_entry_in_48hr_derived\" \"icu_entry_in_72hr_derived\". user specified time window x hour used, field \"icu_entry_in_xhr_derived\" computed addition \"icu_entry_derived\".","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute entry to Intensive Care Unit — icu_entry","text":"function uses DAD fields Admission date-time (Group 04 Fields 01/02), SCU Admit date-time (Group 13, Field 03/04) derive boolean fields indicating ICU entries time hospital stay, within specified time window since hospital admission. definition DAD (Group 13, Field 02), SCUs include ICUs Step-Units. Step-Units considered ICUs. Therefore, function excludes CIHI defined Step-Units numbers calculation: 90 : Step-Medical Unit 93 : Combined Medical/Surgical Step-Unit 95 : Step-Surgical Unit 99 : SCU Please refer CIHI DAD abstracting manual details.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute entry to Intensive Care Unit — icu_entry","text":": design, function return NA values. one tries left-join output function another table, make sure list encounters aligns tables","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute entry to Intensive Care Unit — icu_entry","text":"","code":"# Default time window 24, 48, 72 hours: if (FALSE) { icu_entry (cohort, ipscu) }  # User specified time window: if (FALSE) { icu_entry (cohort, ipscu, window=12) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Length of Stay in Intensive Care Unit — icu_los","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":"Calculates total duration Intensive Care Unit (ICU) encounter spent hospital stay using CIHI Discharge Abstract Database (DAD) fields","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":"","code":"icu_los(cohort, ipscu)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":"cohort (data.table data.frame) Table relevant encounters interest, row corresponds single encounter. Must contain GEMINI Encounter ID (genc_id). ipscu (data.table data.frame) Table equivalent ipscu table defined GEMINI Data Repository Dictionary. Table must contain fields: GEMINI Encounter ID (genc_id), SCU admission time (scu_admit_date_time \"yyyy-mm-dd hh:mm\" format), SCU discharge time (scu_discharge_date_time \"yyyy-mm-dd hh:mm\" format), SCU number (scu_unit_number).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":"(data.table) default, encounter input \"cohort\" returns corresponding derived numeric fields \"icu_los_hrs_derived\" \"icu_los_days_derived\".","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":"function calculates length stay (LoS) hours days encounter spent ICU hospital stay. uses DAD fields SCU Admit date-time (Group 13, Field 03/04) SCU Discharge date-time (Group 13, Field 05/06) derive numeric fields. Rows either SCU Admit/Discharge date-time fields missing, counted calculation. encounters multiple ICU visits, function returns sum duration visit. definition DAD (Group 13, Field 02), SCUs include ICUs Step-Units. Step-Units considered ICUs. Therefore, function excludes CIHI defined Step-Units numbers calculation: 90 : Step-Medical Unit 93 : Combined Medical/Surgical Step-Unit 95 : Step-Surgical Unit 99 : SCU Please refer CIHI DAD abstracting manual details.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":": design, function return NA values. Encounter IDs cohort table present ipscu table assumed visits ICU. encounters, value 0 assigned derived fields. one tries left-join output function another table, make sure list encounters aligns tables","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/icu_los.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Length of Stay in Intensive Care Unit — icu_los","text":"","code":"# Compute ICU LoS for all encounters in ipadmdad: if (FALSE) { icu_los (cohort=ipadmdad, ipscu=ipscu) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/in_hospital_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","title":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","text":"in_hospital_mortality returns whether patient deceased hospital based CIHI DAD field discharge disposition","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/in_hospital_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","text":"","code":"in_hospital_mortality(ipadmdad, suicide = FALSE)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/in_hospital_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","text":"ipadmdad (data.frame data.table) Table relevant encounters interest DRM table \"ipadmdad\" (see GEMINI Data Repository Dictionary). Must contain two fields: genc_id discharge_disposition. suicide (logical) TRUE/FALSE argument indicating whether suicides facility counted towards -hospital mortality rate .","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/in_hospital_mortality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","text":"data.table number rows input ipadmdad, additional derived boolean field labelled in_hospital_mortality_derived. Possible values TRUE, FALSE NA, NA indicates missing discharge disposition.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/in_hospital_mortality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","text":"function takes CIHI DAD \"discharge disposition\" field (Group 05, Field 05 19/20 CIHI DAD) generates boolean variable indicating whether patient deceased hospital stay. current version function captures four possible values indicating patient deceased hospital: 7 :  Died (Deprecated post 2017) 72 : Died Facility 73 : Medical Assistance Dying 74 : Suicide Facility (Excluded calculation default; can included setting suicide argument TRUE)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/in_hospital_mortality.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute in-hospital mortality using CIHI DAD — in_hospital_mortality","text":"NA values returned data.table indicate missing discharge disposition field values.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute hospital Length of Stay  (LoS) — length_of_stay","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"length_of_stay returns Length Stay hospital admissions unit hours days.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"","code":"length_of_stay(   ipadmdad,   adm_dtvar = \"admission_date_time\",   dis_dtvar = \"discharge_date_time\" )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"ipadmdad (data.frame data.table) Table relevant encounters interest DRM table \"ipadmdad\" (see GEMINI Data Repository Dictionary). Must contain three fields: encounter ID (genc_id), two date-time variables corresponding admission discharge (typically admission_date_time discharge_date_time). Date-time variables must \"yyyy-mm-dd hh:mm\" format. adm_dtvar (character) Character string defining column name admission date-time (typically \"admission_date_time\"). dis_dtvar (character) Character string defining column name discharge date-time (typically \"discharge_date_time\").","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"data.table number rows input \"ipadmdad\", additional derived numeric fields labelled \"los_hrs_derived\" \"los_days_derived\".","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"Length Stay defined duration hospital -patient stay, thus, calculated (discharge_date_time - admission_date_time). currently major patient outcome various research studies one physician performance indicators MyPracticeReport. Researchers might consider modifications metric. One example adjusting patient receives palliative care. transfer palliative unit within hospital trackable (e.g. room transfer data), might good idea re-define discharge point palliative unit entrance. reduce bias metric since patient care palliative order different.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"NA values returned data.table indicates either missing admission/discharge date time format incorrect.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/length_of_stay.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute hospital Length of Stay  (LoS) — length_of_stay","text":"function takes two optional input arguments defining admission discharge date-time variables interest (default admission_date_time discharge_date_time).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/lunique.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns number of unique values — lunique","title":"Returns number of unique values — lunique","text":"Returns number unique values","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/lunique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns number of unique values — lunique","text":"","code":"lunique(x)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/lunique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns number of unique values — lunique","text":"x (vector)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/lunique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns number of unique values — lunique","text":"","code":"lunique(c(1, 1, 2, 2, 2, 3)) #> [1] 3"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/max_pairwise_smd.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","title":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","text":"Maximum Pairwise Standardized Mean Difference","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/max_pairwise_smd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","text":"","code":"max_pairwise_smd(x, name, round_to = 3, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/max_pairwise_smd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","text":"x named (list) list element vector corresponding observations variable interest particular strata (corresponding name). See example can constructed. name (character) Unused variable required supported extra.col table1::table1(). round_to (numeric) many digits round standardized mean difference . ... Additional arguments passed table1::table1().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/max_pairwise_smd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","text":"(numeric) maximum pairwise standardized mean difference strata particular variable.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/max_pairwise_smd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","text":"implementation stddiff package fragile, smd package. However, smd package uses population variance calculate SMD opposed sample variance. can cause small inaccuracies final result. Therefore elect implement stddiff. Another consideration stddiff can maximally precise 3 decimal places. Additionally, large cohorts, standardized mean differences calculated categorical variables using stddiff package may throw n[1] * n[2] : NAs produced integer overflow. implementation issue stddiff calculation standard errors standardized mean differences. However, since standard errors used final output, can safely ignored.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/max_pairwise_smd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Pairwise Standardized Mean Difference — max_pairwise_smd","text":"","code":"max_pairwise_smd(split(mtcars$disp, mtcars$am)) #> [1] 1.478"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of radiology tests per encounter — n_imaging","title":"Compute the number of radiology tests per encounter — n_imaging","text":"n_imaging returns number radiology tests hospital admission.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of radiology tests per encounter — n_imaging","text":"","code":"n_imaging(   cohort,   imaging,   dtvar = \"performed_date_time\",   mapvar = \"modality_mapped\" )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of radiology tests per encounter — n_imaging","text":"cohort (data.frame data.table) Cohort table relevant encounters interest, row corresponds single encounter. Must contain GEMINI Encounter ID (genc_id). imaging (data.table data.frame) Table equivalent DRM table \"radiology\" defined GEMINI Data Repository Dictionary. Table must contain three fields: genc_id, imaging performed date-time (see dtvar, \"yyyy-mm-dd hh:mm\" format), field standardizes imaging test type (see mapvar). dtvar (character) Name column imaging table containing date-time performed imaging test (usually \"performed_date_time\"). mapvar (character) Name column imaging table containing imaging test type (usually \"modality_mapped\").","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of radiology tests per encounter — n_imaging","text":"data.table number rows input \"cohort\", additional derived numeric fields labelled \"n_img_xray_derived\",  \"n_img_ct_derived\", \"n_img_mri_derived\",  \"n_img_us_derived\", \"n_img_other_derived\", \"n_img_int_derived\" \"n_img_ct_mri_us_derived\".","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the number of radiology tests per encounter — n_imaging","text":"function takes list admissions DRM table equivalent imaging table generate numeric fields counting number different radiology tests admission. Imaging table database include field classifies test 7 categories. 1 : X-Ray 2 : CT 3 : MRI 4 : Ultrasound 5 : 6 : Interventional radiology procedures 7 : Echo (Excluded) Therefore, function run standardization efforts imaging table (performed GEMINI team). Currently, number advanced radiology tests one performance metrics MyPracticeReport. CT, MRI Ultrasound considered advance imaging tests, can retrieved derived variable (n_img_ct_mri_us_derived). tests performed ED -patient settings counted.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute the number of radiology tests per encounter — n_imaging","text":"Function returns data.table id field several numeric fields. design, function return NA values. one tries left-join output function another table (another list admissions left), make sure list admissions (patient) aligns tables.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_imaging.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the number of radiology tests per encounter — n_imaging","text":"function takes optional inputs specifying field label variables corresponding date-time performed imaging test mapped imaging modality, respectively. avoid hardcoding variable names within function case field labels differ databases.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_rbc_transfusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number Red Blood Cell (RBC) Transfusions per encounter — n_rbc_transfusions","title":"Count the number Red Blood Cell (RBC) Transfusions per encounter — n_rbc_transfusions","text":"function calculates number appropriate transfusions total transfusions per encounter. definition appropriate transfusion can found sample Practice Report. transfusion defined procedure codes: 4144461. 4137859 4022173 appropriate transfusion also requires patients pre-transfusion hemoglobin levels  80 g/L. Athena definition hemoglobin test: 3000963 Red blood cell transfusions hemoglobin measurement within 48 hours prior transfusion excluded. scenarios rare, typically occurring approximately 2% blood transfusions GEMINI data.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_rbc_transfusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number Red Blood Cell (RBC) Transfusions per encounter — n_rbc_transfusions","text":"","code":"n_rbc_transfusions(dbcon, cohort)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_rbc_transfusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number Red Blood Cell (RBC) Transfusions per encounter — n_rbc_transfusions","text":"dbcon (DBIConnection) database connection GEMINI database. cohort (data.frame data.table) Cohort table relevant encounters interest row corresponds single encounter. Must contain following columns: genc_id (integer): GEMINI encounter ID hospital_num (integer): Hospital number","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_rbc_transfusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number Red Blood Cell (RBC) Transfusions per encounter — n_rbc_transfusions","text":"(data.table) Table three columns: genc_id, n_app_rbc_transfusion_derived (number appropriate RBC transfusions), n_rbc_transfusion_derived (total RBC transfusions). Encounters without transfusion get 0.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_rbc_transfusions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Count the number Red Blood Cell (RBC) Transfusions per encounter — n_rbc_transfusions","text":"Transfusion data two hospitals known data quality issues automatically removed function. genc_ids sites included returned output. merging output function another table, genc_ids value NA.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_routine_bloodwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","title":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","text":"n_routine_bloodwork returns number routine bloodwork (Sodium Hemoglobin tests) hospital admission. Sodium Heamoglobin tests defined OMOP codes. Sodium code 3019550. Hemoglobin 3000963.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_routine_bloodwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","text":"","code":"n_routine_bloodwork(dbcon, cohort)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_routine_bloodwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","text":"dbcon (DBIConnection) database connection GEMINI database. cohort (data.frame data.table) Cohort table relevant encounters interest, row corresponds single encounter. Must contain GEMINI Encounter ID (genc_id).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_routine_bloodwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","text":"data.table object number rows input \"cohort\", additional derived numeric field labelled \"n_routine_bloodwork_derived\"","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_routine_bloodwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","text":"function takes list admissions DRM table equivalent lab table (see GEMINI Data Repository Dictionary) generate numeric fields counting number Sodium Hemoglobin tests admission. Lab table database include field classifies test different categories. Therefore, function run standardization efforts lab table (performed GEMINI). Currently, number routine bloodwork tests one performance metrics MyPracticeReport. Function automatically removes tests without valid numeric result value. Exceptions boundary result value (e.g. \">120\" mmol/L), still counted valid tests. tests performed ED -patient settings counted.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/n_routine_bloodwork.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute the number of routine bloodwork tests per encounter — n_routine_bloodwork","text":"Function returns data.table id field genc_id one numeric field indicating number bloodwork tests per encounter. design, function return NA values. genc_id entries \"lab\" table, admission gets assigned 0 number tests. one tries left-join output function another table (another list admissions left), make sure list admissions (patient) aligns tables function requires mappings Subject Matter Expert ensure tests mapped 3019550 - Sodium (Moles/volume) Serum Plasma, 3000963 - Hemoglobin (Mass/volume) Blood","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute readmission and episodes of care. — readmission","title":"Compute readmission and episodes of care. — readmission","text":"readmission.R computes whether patient associated episode care readmitted GEMINI hospital within time window interest. default readmission time window 7 30 days. line CIHI guidelines, readmission calculations based episodes care instead individual encounters order avoid linked transfers counted readmissions (also see documentation episodes_of_care()). Specifically, episode care refers contiguous inpatient hospitalizations medical intensive care service within GEMINI network. Episodes involving inter-facility transfers linked regardless diagnosis. acute care transfer assumed occurred either following criteria met: admission medical intensive care service GEMINI hospital within 7 hours discharge another GEMINI hospital, regardless whether transfer coded admission medical intensive care service GEMINI hospital within 7-12 hours discharge another GEMINI hospital, least 1 hospital coded transfer: Coded transfers based DAD Institution Institution fields episodes care involving acute care transfers, readmissions attributed last hospital patient discharged readmission.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute readmission and episodes of care. — readmission","text":"","code":"readmission(   dbcon,   elective_admit = TRUE,   death = TRUE,   MAID = FALSE,   palliative = FALSE,   chemo = FALSE,   mental = FALSE,   obstetric = FALSE,   signout = FALSE,   restricted_cohort = NULL,   readm_win = c(7, 30) )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute readmission and episodes of care. — readmission","text":"dbcon (DBIConnection) database connection GEMINI database. elective_admit (logical) TRUE (default), elective episodes care considered true readmissions, therefore removed numerator. Specifically, first encounter (n)th episode care elective (admit_category = 'L'), (n-1)th episode care considered followed readmission (readmit(n-1) = FALSE). death (logical) TRUE (default), episodes care ending -hospital death removed denominator. Specifically, (n)th episode care ended death, impossible patient readmitted, therefore episode care considered readmission calculation (readmit(n) = NA). MAID (logical) TRUE (default): Episodes care involve MAID considered true readmissions, therefore removed numerator. Specifically, encounter (n)th episode care involves MAID, (n-1)th episode care considered followed readmission (readmit(n-1) = FALSE). Note episodes care involving MAID end death, however, removed denominator unless death flag set TRUE well (recommended approach). palliative (logical) TRUE (default): Episodes care involving palliative care excluded numerator denominator. Specifically, episode care palliative care type-M diagnosis considered true readmissions (readmit(n-1) = FALSE). Additionally, similarly death, palliative episodes care followed future readmission therefore excluded denominator (readmit(n) = NA) chemo (logical) TRUE (default): Episodes care involve chemotherapy considered true readmissions, therefore removed numerator. Specifically, encounter (n)th episode care involves chemotherapy, (n-1)th episode care considered followed readmission (readmit(n-1) = FALSE). mental (logical) TRUE (default): Episodes care mental health excluded numerator denominator. Specifically, episodes care fall CIHI's Major Clinical Category (MCC) 17 considered true readmissions therefore removed numerator (readmit(n-1) = FALSE). Additionally, considered acute care therefore included readmission denominator (readmit(n) = NA) obstetric (logical) TRUE (default): Episodes care involve obstetric delivery considered true readmissions, therefore removed numerator. Specifically, encounter (n)th episode care involves obstetric delivery, (n-1)th episode care considered followed readmission (readmit(n-1) = FALSE). signout (logical) TRUE (default), episodes care last encounter self sign-/left medical advice (LAMA) removed denominator. Specifically, (n)th episode care ended self-signout/LAMA, considered readmission calculation (readmit(n) = NA). restricted_cohort (data.frame data.table) User specified cohort restricted subset encounters DRM table \"ipadmdad\" (see GEMINI Data Repository Dictionary). Must contain genc_id identifier. Default Null, loads entire \"ipadmdad\" table user-provided database (recommended approach). readm_win (integer | vector) readmission window(s) interest, days (default: readm_win = c(7,30) calculate 7- & 30-day readmission)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute readmission and episodes of care. — readmission","text":"function returns data.table containing genc_id, AT_in_occurred, AT_out_occurred, epicare (see episodes_of_care()), readmit7 (default), readmit30 (default). readmit7 readmit30 logical variables indicating whether episode care followed readmission. Note readmissions attributed last encounter episode care. Episodes care last encounter readmitX = NA removed denominator. Note: last encounter episode care transfer-coding (encounter associated transfer exist GEMINI database), episode care excluded readmission denominator (readmit(n) = NA). avoid inaccurate attribution potential readmission hospital associated intermediate (.e., last) encounter episode care.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute readmission and episodes of care. — readmission","text":"function calls episodes_of_care() function link encounters acute care transfers episodes care. conducting readmission calculations using function output, number encounters readmission == TRUE numerator, number eligible episodes care (readmission != NA) denominator. example, 7-day readmission rate can calculated mean(readmit7, na.rm=TRUE), readmit7 variable returned readmission() function. function designed consistent CIHI guidelines readmission calculations. Please carefully review reference applying function research purposes. Users may choose deviate CIHI definition readmission setting CIHI flags (see ) FALSE.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Compute readmission and episodes of care. — readmission","text":"Warnings produced either death elective_admit flags set FALSE, input contains user-specified restricted cohort, 25% episodes care removed denominator due CIHI flags buffer period.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute readmission and episodes of care. — readmission","text":"CIHI readmission guidelines","code":""},{"path":[]},{"path":"https://gemini-medicine.github.io/Rgemini/reference/readmission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute readmission and episodes of care. — readmission","text":"","code":"if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  ## default readmission calculation (with elective = TRUE & death = TRUE by default) readmission(dbcon)  ## Readmission calculation following CIHI definition readmission(dbcon, elective_admit = TRUE, death = TRUE, MAID = TRUE, palliative = TRUE,                    chemo = TRUE, mental = TRUE, obstetric = TRUE, signout = TRUE)  }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Cell Suppression (Categorical) — render_cell_suppression.categorical","title":"Render Cell Suppression (Categorical) — render_cell_suppression.categorical","text":"custom render table1 categorical variables performs GEMINI \"cell suppression\" variable levels contain fewer 6 observations. total number variable levels fewer 6 observations less 6, cells levels variable must censored (possible indirectly deduce missing counts otherwise).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Cell Suppression (Categorical) — render_cell_suppression.categorical","text":"","code":"render_cell_suppression.categorical(x, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Cell Suppression (Categorical) — render_cell_suppression.categorical","text":"x (character factor) categorical variable summarize. ... Optionally accept named digits (integer) single_level_binary (logical) argument specifiesthe number digits round percentages .","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Cell Suppression (Categorical) — render_cell_suppression.categorical","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.categorical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Cell Suppression (Categorical) — render_cell_suppression.categorical","text":"","code":"x <- factor(c(rep(\"a\", times = nrow(mtcars)), \"b\"), levels = c(\"a\", \"b\")) render_cell_suppression.categorical(x) #>                             a              b  #>             \"\" \"(suppressed)\" \"(suppressed)\"   x2 <- factor(c(rep(\"a\", times = nrow(mtcars))), levels = c(\"a\", \"b\")) render_cell_suppression.categorical(x2) #>                           a             b  #>            \"\" \"32 (100.0%)\"    \"0 (0.0%)\"   y <- factor(   c(rep(\"a\", times = nrow(mtcars)), \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"),   levels = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\") ) render_cell_suppression.categorical(y) #>                                                     a  #>                         \"\"               \"32 (84.2%)\"  #>                          b                          c  #> \"&lt; 6 obs. (suppressed)\" \"&lt; 6 obs. (suppressed)\"  #>                          d                          e  #> \"&lt; 6 obs. (suppressed)\" \"&lt; 6 obs. (suppressed)\"  #>                          f                          g  #> \"&lt; 6 obs. (suppressed)\" \"&lt; 6 obs. (suppressed)\"   z <- factor(   c(     rep(\"a\", times = 100),     rep(\"b\", times = 50),     rep(\"c\", times = 7),     rep(\"d\", times = 2)   ),   levels = c(\"a\", \"b\", \"c\", \"d\", \"e\") )  render_cell_suppression.categorical(z) #>                             a              b              c              d  #>             \"\"  \"100 (62.9%)\"   \"50 (31.4%)\" \"(suppressed)\" \"(suppressed)\"  #>              e  #>     \"0 (0.0%)\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Cell Suppression (Continuous) — render_cell_suppression.continuous","title":"Render Cell Suppression (Continuous) — render_cell_suppression.continuous","text":"custom renderer table1 continuous variables performs GEMINI \"cell suppression\" variable levels contain fewer 6 observations.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Cell Suppression (Continuous) — render_cell_suppression.continuous","text":"","code":"render_cell_suppression.continuous(x, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Cell Suppression (Continuous) — render_cell_suppression.continuous","text":"x (numeric) continuous variable summarize. ... arguments, passed table1:::stats.apply.rounding().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Cell Suppression (Continuous) — render_cell_suppression.continuous","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Cell Suppression (Continuous) — render_cell_suppression.continuous","text":"","code":"x <- 1:6 render_cell_suppression.continuous(x) #>                                         Mean (SD)  #>                       \"\" \"3.500 (&plusmn; 1.871)\"   y <- 1:2 render_cell_suppression.continuous(y) #>                                             Mean (SD)  #>                         \"\" \"&lt; 6 obs. (suppressed)\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Cell Suppression (Default) — render_cell_suppression.default","title":"Render Cell Suppression (Default) — render_cell_suppression.default","text":"wrapper around render functions type variable.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Cell Suppression (Default) — render_cell_suppression.default","text":"","code":"render_cell_suppression.default(   x,   name,   missing = any(is.na(x)),   transpose = FALSE,   render.empty = \"NA\",   render.continuous = render_cell_suppression.continuous,   render.categorical = render_cell_suppression.categorical,   render.missing = render_cell_suppression.missing,   ... )"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Cell Suppression (Default) — render_cell_suppression.default","text":"x (vector) vector numeric, factor, character logical values. name (character) Name variable rendered (ignored). missing (logical) missing values included? transpose (logical) Logical indicating whether table transposed. render.empty (character) character return x empty. render.continuous (function) function render continuous (.e. numeric) values. Can also character string, case passed table1:::parse.abbrev.render.code(). render.categorical (function) function render categorical (.e. factor, character logical) values. Can also character string, case passed table1:::parse.abbrev.render.code(). render.missing (function) function render missing (.e. NA) values. Can also character string, case passed table1:::parse.abbrev.render.code(). Set NULL ignore missing values. ... arguments, passed table1:::stats.apply.rounding().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Cell Suppression (Default) — render_cell_suppression.default","text":"(character) Summary variable character vector cell suppression applied.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Cell Suppression (Discrete) — render_cell_suppression.discrete","title":"Render Cell Suppression (Discrete) — render_cell_suppression.discrete","text":"custom render table1 discrete variables performs GEMINI \"cell suppression\" variable levels contain fewer 6 observations. useful indicator variable example, like count total number events. [table1::render.default.categorical()] break indicator variable components first (0 1) give individual counts. simply count 1s (example).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Cell Suppression (Discrete) — render_cell_suppression.discrete","text":"","code":"render_cell_suppression.discrete(x)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Cell Suppression (Discrete) — render_cell_suppression.discrete","text":"x (character factor) discrete variable summarize.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Cell Suppression (Discrete) — render_cell_suppression.discrete","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Cell Suppression (Discrete) — render_cell_suppression.discrete","text":"","code":"x <- 1:6 render_cell_suppression.discrete(x) #>       Sum  #>   \"\" \"21\"   y <- 1:2 render_cell_suppression.discrete(y) #>                                                   Sum  #>                         \"\" \"&lt; 6 obs. (suppressed)\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Cell Suppression (Missing) — render_cell_suppression.missing","title":"Render Cell Suppression (Missing) — render_cell_suppression.missing","text":"custom render table1 missing variables performs GEMINI \"cell suppression\" variable levels contain fewer 6 observations. useful indicator variable example, like count total number events. [table1::render.default.categorical()] break indicator variable components first (0 1) give individual counts. simply count 1s (example).","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Cell Suppression (Missing) — render_cell_suppression.missing","text":"","code":"render_cell_suppression.missing(x)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Cell Suppression (Missing) — render_cell_suppression.missing","text":"x (character factor) variable missing values summarize.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Cell Suppression (Missing) — render_cell_suppression.missing","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Cell Suppression (Missing) — render_cell_suppression.missing","text":"","code":"x <- factor(sample(0:1, 99, replace = TRUE), labels = c(\"Female\", \"Male\")) x[1:3] <- NA render_cell_suppression.missing(x) #>                                               Missing  #>                         \"\" \"&lt; 6 obs. (suppressed)\"   x[5:10] <- NA render_cell_suppression.missing(x) #>    Missing  #> \"9 (9.1%)\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.strat.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Cell Suppression (Strata) — render_cell_suppression.strat","title":"Render Cell Suppression (Strata) — render_cell_suppression.strat","text":"custom render table1 stratification variables performs GEMINI \"cell suppression\" levels contain fewer 6 observations. Note even strata variable cell suppression, possible reverse-calculate total given overall column. Therefore recommended also hide \"Overall\" column call table1::table1().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.strat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Cell Suppression (Strata) — render_cell_suppression.strat","text":"","code":"render_cell_suppression.strat(label, n, transpose = FALSE)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.strat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Cell Suppression (Strata) — render_cell_suppression.strat","text":"label (character) character vector containing labels. n (numeric character) numeric vector containing sizes. transpose (logical) Used internally table1::table1().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.strat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Cell Suppression (Strata) — render_cell_suppression.strat","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_cell_suppression.strat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Render Cell Suppression (Strata) — render_cell_suppression.strat","text":"Arguments function passed directly defined work internally table1::table1().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_default.discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Default (Discrete) — render_default.discrete","title":"Render Default (Discrete) — render_default.discrete","text":"default render discrete variables table1 package. generate sum level variable.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_default.discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Default (Discrete) — render_default.discrete","text":"","code":"render_default.discrete(x)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_default.discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Default (Discrete) — render_default.discrete","text":"x (character factor) discrete variable summarize.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_default.discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Default (Discrete) — render_default.discrete","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_default.discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Default (Discrete) — render_default.discrete","text":"","code":"render_default.discrete(mtcars$vs) #>       Sum  #>   \"\" \"14\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_mean.continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Mean (Continuous) — render_mean.continuous","title":"Render Mean (Continuous) — render_mean.continuous","text":"default renderer continuous variables table1 package. generate formatted mean standard deviation level variable.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_mean.continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Mean (Continuous) — render_mean.continuous","text":"","code":"render_mean.continuous(x, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_mean.continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Mean (Continuous) — render_mean.continuous","text":"x (character factor) continuous variable summarize. ... arguments, passed table1:::stats.apply.rounding().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_mean.continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Mean (Continuous) — render_mean.continuous","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_mean.continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Mean (Continuous) — render_mean.continuous","text":"","code":"render_mean.continuous(mtcars$disp) #>                                                 Mean (SD)  #>                           \"\" \"230.722 (&plusmn; 123.939)\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_median.continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Median (Continuous) — render_median.continuous","title":"Render Median (Continuous) — render_median.continuous","text":"default renderer continuous variables table1 package. generate formatted median first third quartiles level variable.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_median.continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Median (Continuous) — render_median.continuous","text":"","code":"render_median.continuous(x, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_median.continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Median (Continuous) — render_median.continuous","text":"x (character factor) continuous variable summarize. ... arguments, passed table1:::stats.apply.rounding().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_median.continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Median (Continuous) — render_median.continuous","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_median.continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Median (Continuous) — render_median.continuous","text":"","code":"render_median.continuous(mtcars$disp) #>                                           Median [Q1, Q3]  #>                           \"\" \"196.300 [120.825, 326.000]\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_strict_cell_suppression.categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Strict Cell Suppression (Categorical) — render_strict_cell_suppression.categorical","title":"Render Strict Cell Suppression (Categorical) — render_strict_cell_suppression.categorical","text":"Strictly suppress counts less 6 message. differs conservative logic render_cell_suppression.categorical().","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_strict_cell_suppression.categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Strict Cell Suppression (Categorical) — render_strict_cell_suppression.categorical","text":"","code":"render_strict_cell_suppression.categorical(x, ...)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_strict_cell_suppression.categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Strict Cell Suppression (Categorical) — render_strict_cell_suppression.categorical","text":"x (character factor) categorical variable summarize. ... Optionally accept named digits (integer) single_level_binary (logical) argument specifiesthe number digits round percentages .","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_strict_cell_suppression.categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Strict Cell Suppression (Categorical) — render_strict_cell_suppression.categorical","text":"named (character) Concatenated \"\" shift values one row proper alignment.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/render_strict_cell_suppression.categorical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Strict Cell Suppression (Categorical) — render_strict_cell_suppression.categorical","text":"","code":"x <- factor(c(rep(\"a\", times = nrow(mtcars)), \"b\"), levels = c(\"a\", \"b\")) render_strict_cell_suppression.categorical(x) #>                                                     a  #>                         \"\"               \"32 (97.0%)\"  #>                          b  #> \"&lt; 6 obs. (suppressed)\"   x2 <- factor(c(rep(\"a\", times = nrow(mtcars))), levels = c(\"a\", \"b\")) render_strict_cell_suppression.categorical(x2) #>                           a             b  #>            \"\" \"32 (100.0%)\"    \"0 (0.0%)\"   y <- factor(   c(rep(\"a\", times = nrow(mtcars)), \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"),   levels = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\") ) render_strict_cell_suppression.categorical(y) #>                                                     a  #>                         \"\"               \"32 (84.2%)\"  #>                          b                          c  #> \"&lt; 6 obs. (suppressed)\" \"&lt; 6 obs. (suppressed)\"  #>                          d                          e  #> \"&lt; 6 obs. (suppressed)\" \"&lt; 6 obs. (suppressed)\"  #>                          f                          g  #> \"&lt; 6 obs. (suppressed)\" \"&lt; 6 obs. (suppressed)\"   z <- factor(   c(     rep(\"a\", times = 100),     rep(\"b\", times = 50),     rep(\"c\", times = 7),     rep(\"d\", times = 2)   ),   levels = c(\"a\", \"b\", \"c\", \"d\", \"e\") )  render_strict_cell_suppression.categorical(z) #>                                                     a  #>                         \"\"              \"100 (62.9%)\"  #>                          b                          c  #>               \"50 (31.4%)\"                 \"7 (4.4%)\"  #>                          d                          e  #> \"&lt; 6 obs. (suppressed)\"                 \"0 (0.0%)\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/sample_icd.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate ICD-10 Diagnosis Codes — sample_icd","title":"Simulate ICD-10 Diagnosis Codes — sample_icd","text":"function simulates ICD-10 diagnosis codes random user specified pattern.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/sample_icd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate ICD-10 Diagnosis Codes — sample_icd","text":"","code":"sample_icd(n = 1, source = \"comorbidity\", dbcon = NULL, pattern = NULL)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/sample_icd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate ICD-10 Diagnosis Codes — sample_icd","text":"n (integer) Number ICD codes simulate. source (string) source ICD coding sample . Default \"comorbidity\" 2011 version ICD-10 codes implemented R comorbidity package. source icd_lookup, ICD-10-CA codes sampled lookup_icd10_ca_description table GEMINI database, see details GEMINI Data Repository Dictionary. dbcon (DBIConnection) database connection GEMINI database. Required source icd_lookup. pattern (string) valid regex expression specifies desired pattern returned ICD codes matched .","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/sample_icd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate ICD-10 Diagnosis Codes — sample_icd","text":"(vector) vector ICD diagnostic codes.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/sample_icd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate ICD-10 Diagnosis Codes — sample_icd","text":"","code":"### Simulate 100 ICD-10 codes based on the 2011 version. if (FALSE)  sample_icd(100, source=\"comorbidity\")   ### Simulate 100 ICD-10 codes starting with \"C2\" or \"E10\" based on the 2011 version. if (FALSE)  sample_icd(100, source=\"comorbidity\", pattern=\"^C2|^E10\")   ### Simulate 50 ICD-10-CA codes based on codes found in the `lookup_icd10_ca_description` table if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\")) sample_icd(50, source=\"icd_lookup\", dbcon=dbcon) }"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/season.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Season — season","title":"Get Season — season","text":"Given date, return named season.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Season — season","text":"","code":"season(date)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Season — season","text":"date (Date)","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Season — season","text":"(character) One \"Spring\", \"Summer\", \"Fall\", \"Winter\".","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Season — season","text":"","code":"season(as.Date(Sys.Date())) #> [1] \"Fall\""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/stat_holidays_ON.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag statutory holidays in Ontario — stat_holidays_ON","title":"Flag statutory holidays in Ontario — stat_holidays_ON","text":"function merges given table containing dates interest holiday table flag dates holidays/observed holidays.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/stat_holidays_ON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag statutory holidays in Ontario — stat_holidays_ON","text":"","code":"stat_holidays_ON(data, date_column, include_observed_holidays = TRUE)"},{"path":"https://gemini-medicine.github.io/Rgemini/reference/stat_holidays_ON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag statutory holidays in Ontario — stat_holidays_ON","text":"data (data.frame data.table) Table containing date_column can converted YYYY-MM-DD format date_column (character) Name column data corresponding relevant dates; merged holiday table. include_observed_holidays (logical) TRUE, observed holidays included output.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/stat_holidays_ON.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag statutory holidays in Ontario — stat_holidays_ON","text":"function returns provided input table data following additional columns: date: date_column YYY-MM-DD format holiday: flag indicating whether date corresponds holiday holiday_weekday: day week holiday occurred holiday_name: name holiday occurring given date include_observed_holidays == TRUE, 3 additional columns returned observed_holiday = TRUE dates holiday observed (whether corresponds actual date holiday). Additionally, corresponding weekday holiday name observed holidays returned separate columns.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/reference/stat_holidays_ON.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag statutory holidays in Ontario — stat_holidays_ON","text":"","code":"if (FALSE) { drv <- dbDriver(\"PostgreSQL\") dbcon <- DBI::dbConnect(drv,                         dbname = \"db\",                         host = \"172.XX.XX.XXX\",                         port = 1234,                         user = getPass(\"Enter user:\"),                         password = getPass(\"password\"))  # derive which encounters were discharged on a holiday ipadm <- dbGetQuery(db, \"SELECT discharge_date_time FROM admdad;\") holidays <- stat_holidays_ON(ipadm, \"discharge_date_time\") }"},{"path":"https://gemini-medicine.github.io/Rgemini/news/index.html","id":"rgemini-031","dir":"Changelog","previous_headings":"","what":"Rgemini 0.3.1","title":"Rgemini 0.3.1","text":"Allows user specify number digits round percentages cell suppression categorical variables, without forcing rounding integer. Allows user render one level binary variables table1. Fixes find_db_tablename readmission DBs foreign data wrappers.","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/news/index.html","id":"rgemini-030","dir":"Changelog","previous_headings":"","what":"Rgemini 0.3.0","title":"Rgemini 0.3.0","text":"Exports n_rbc_transfusion function. Adds installation instructions GEMINI HPC. Tested GEMINI Data Repository v2.1.2","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/news/index.html","id":"rgemini-020","dir":"Changelog","previous_headings":"","what":"Rgemini 0.2.0","title":"Rgemini 0.2.0","text":"Small bug fixes n_imaging n_rbc_transfusion Standardized argument names DB cohort inputs Standardized function names count functions Improved documentation","code":""},{"path":"https://gemini-medicine.github.io/Rgemini/news/index.html","id":"rgemini-010","dir":"Changelog","previous_headings":"","what":"Rgemini 0.1.0","title":"Rgemini 0.1.0","text":"initial release Rgemini, includes variety functions data analysis GEMINI dataset.","code":""}]
