% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{check_input}
\alias{check_input}
\title{Check user inputs}
\usage{
check_input(
  arginput,
  argtype,
  length = NULL,
  categories = NULL,
  interval = NULL,
  colnames = NULL,
  coltypes = NULL,
  unique = FALSE
)
}
\arguments{
\item{arginput}{(\code{character})\cr
Input argument to be checked. Users can provide multiple inputs to be checked
within a single call to this function by providing all inputs as a list
(e.g., \code{arginput = list(input1, input2)}). However, this only works if all
input arguments (e.g., input1 AND input2) are supposed to meet the same
criteria (e.g., both should be numeric within interval 0-10).}

\item{argtype}{(\code{character})\cr
Required type of input argument based on \code{class()}. Example type(s) users can
specify:
\itemize{
\item \code{"logical"}
\item \code{"character"}
\item \code{"numeric"} (or \code{"integer"} if specifically checking for integers)
\item \code{"data.table"}
\item \code{"data.frame"}
\item \code{"DBI" | "dbcon" | "PostgreSQL"} for DB connection input
\item \code{"list"}
}

If an input object can be one of several acceptable types (e.g.,
\code{data.table} OR \code{data.frame}), types should be provided as a character vector
(e.g., \code{argtype = c("data.frame", "data.table")}).}

\item{length}{(\code{numeric})\cr
Optional input specifying the expected length of a given input argument
(e.g., use \code{length = 2} to check if a vector/list contains 2 elements).}

\item{categories}{(\code{character})\cr
Optional input if argtype is \code{"character"}.
Character vector specifying acceptable categories for character inputs (e.g.,
\code{categories = c("none", "all")})}

\item{interval}{(\code{numeric})\cr
Optional input if argtype is \code{"numeric"} or \code{"integer"}.
Numeric vector specifying acceptable range for numeric inputs (e.g.,
\code{interval = c(1,100)}, or for non-negative numbers: \code{interval = c(0, Inf)}).
Note that \code{interval} specifies a closed interval (i.e., end points are
included).}

\item{colnames}{(\code{character})\cr
Optional input if argtype is \code{"data.frame"} or \code{"data.table"}.
Character vector specifying all columns that need to exist in the input table
(e.g., \code{colnames = c("genc_id", "discharge_date_time")}).}

\item{coltypes}{(\code{character})\cr
Optional input if argtype is \code{"data.frame"} or \code{"data.table"}.
Character vector specifying required data type of each column in \code{colnames}
(e.g., \code{coltypes = c("integer", "character")}) where the order of the vector
elements should correspond to the order of the entries in \code{colnames}.
If a column can have multiple acceptable types, types should be separated by
\code{|} (e.g., \code{coltypes = c("integer|numeric", "character|POSIXct")})). For any
columns that do not have to be of a particular type, simply specify as \code{""}
(e.g., \code{coltypes = c("integer|numeric", "")}).}

\item{unique}{(\code{logical})\cr
Optional input if argtype is \code{"data.frame"} or \code{"data.table"}. Flag
indicating whether all rows in the provided input table need to be distinct.}
}
\value{
\cr
If any of the input checks fail, function will return error message and stop
execution of parent \code{Rgemini} function. Otherwise, function will not return
anything.
}
\description{
Function checking whether user-provided inputs for a function are
appropriate. The following check is applied for all inputs:
\itemize{
\item Whether input is of correct type (e.g., \code{logical}, \code{numeric}, \code{character}
etc.)
For some input types, the following additional checks can be applied
optionally:
\item Check whether length of provided input is as expected
\item For \code{numeric}/\code{integer} inputs: Check whether provided input is within
acceptable interval (e.g., between 1-100).
\item For \code{character} (categorical) inputs: Check whether input corresponds to
one of acceptable categories.
\item For \code{data.table|data.frame} inputs: 1) Check whether required columns exist
in table, 2) whether each column is of a specified type, and 3) whether all
entries are unique.
}
}
\examples{
\dontrun{
my_function <- function(input1 = TRUE, # logical
                        input2 = 2, # numeric
                        input3 = 1.5, # numeric
                        input4 = data.frame(
                          genc_id = as.integer(5),
                          discharge_date_time = Sys.time(),
                          hospital_num = 1
                        )) {
  # check single input
  check_input(input1, "logical")

  # check multiple inputs that should be of same type/meet same criteria
  check_input(
    arginput = list(input2, input3), argtype = "numeric",
    length = 1, interval = c(1, 10)
  )

  # check table input (can be either data.frame or data.table)
  check_input(input4,
    argtype = c("data.table", "data.frame"),
    colnames = c("genc_id", "discharge_date_time", "hospital_num"),
    coltypes = c("integer", "character|POSIXct", ""),
    unique = TRUE
  )
}

# will not result in any errors (default inputs are correct)
my_function()

# will result in an error
my_function(input1 = 1) # input 1 has to be logical
}

}
